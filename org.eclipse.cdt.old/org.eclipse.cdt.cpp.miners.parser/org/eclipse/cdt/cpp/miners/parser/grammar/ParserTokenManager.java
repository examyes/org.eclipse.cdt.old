/* Generated By:JavaCC: Do not edit this line. ParserTokenManager.java */
package com.ibm.cpp.miners.parser.grammar;
/*
 * Copyright (C) 2000, 2001 International Business Machines Corporation and others. All Rights Reserved.  
 */

import com.ibm.dstore.core.model.*;
import com.ibm.cpp.miners.parser.dstore.*;
import com.ibm.cpp.miners.parser.grammar.*;
import java.util.*;
import java.io.*;
import java.lang.*;

public class ParserTokenManager implements ParserConstants
{
 public int beginLine;
 public SymbolTable symtab;
 public void setSymbolTable(SymbolTable st) {symtab = st;}

 public String skipOverObjectBody(Token curToken)
 {
  StringBuffer objectBody = new StringBuffer();
  try
  {
   //This kind of sucks, but due to LOOKAHEAD the ASCII_CharStream reader could be one or 
   //probably more characters ahead of what the Parser thinks is the current token (the '{').
   //So first, we'll back the input_stream up to the curToken.

   int curLine = curToken.beginLine;
   int curCol  = curToken.beginColumn;
   curToken.next = null;
   while (input_stream.getBeginLine() != curLine)
    input_stream.backupToken();
   while (input_stream.getBeginColumn() != curCol)
    input_stream.backupToken();


   //input_stream.adjustBeginLineColumn(curLine, curCol);
   beginLine = curLine;

   int c;

   //Now that we have the source location properly saved off in beginLine, and the input stream
   //backed up to the '{', we can proceed. 
   //input_stream.BeginToken();    
   objectBody.append("{");
   int depth = 1;
   do
   {
    c = input_stream.readChar();
    if      (c == 123) depth++;     //123 is a '{'
    else if (c == 125) depth--;     //125 is a '}'
    objectBody.append((char)c);
   } while ((c != 125) || (depth > 0));
   input_stream.backup(1);
   input_stream.BeginToken();

  }
  catch (Throwable e)
  {
   //System.out.print("Error3 ");
   //System.out.println(e.getMessage());
   //Reached End of File...most likely
  }
  return objectBody.toString();
 }

 public void skipOverInitializer(Token curToken)
 {
  try
  {
   //This kind of sucks, but due to LOOKAHEAD the ASCII_CharStream reader could be one or 
   //probably more characters ahead of what the Parser thinks is the current token (the '{').
   //So first, we'll back the input_stream up to the curToken.

   int curLine = curToken.beginLine;
   int curCol  = curToken.beginColumn;
   curToken.next = null;
   while (input_stream.getBeginLine() != curLine)
    input_stream.backupToken();
   while (input_stream.getBeginColumn() != curCol)
    input_stream.backupToken();


   //input_stream.adjustBeginLineColumn(curLine, curCol);
   beginLine = curLine;

   int c;

   //Now that we have the source location properly saved off in beginLine, and the input stream
   //backed up to the '{', we can proceed. 
   //input_stream.BeginToken();    

   int depth = 1;
   do
   {
    c = input_stream.readChar();
    if      (c == 123) depth++;     //123 is a '{'
    else if (c == 125) depth--;     //125 is a '}'
   } while ((c != 125) || (depth > 0));
   input_stream.backup(1);
   input_stream.BeginToken();

  }
  catch (Throwable e)
  {
   //System.out.print("Error3 ");
   //System.out.println(e.getMessage());
   //Reached End of File...most likely
  }
 }

 public void skipOverStringLiteral(Token curToken)
 {
  try
  {
   //This kind of sucks, but due to LOOKAHEAD the ASCII_CharStream reader could be one or 
   //probably more characters ahead of what the Parser thinks is the current token.
   //So first, we'll back the input_stream up to the curToken.

   int curLine = curToken.beginLine;
   int curCol  = curToken.beginColumn;
   curToken.next = null;
   while (input_stream.getBeginLine() != curLine)
    input_stream.backupToken();
   while (input_stream.getBeginColumn() != curCol)
    input_stream.backupToken();

   //input_stream.adjustBeginLineColumn(curLine, curCol);
   beginLine = curLine;

   //Now that we have the source location properly saved off in beginLine, and the input stream
   //backed up to the currentLine, we can proceed. 
   //input_stream.BeginToken();    
   int c = -1;
   int prev_c = -1;
   do
   {
    prev_c = c;
    c = input_stream.readChar();
    } while ((c != 34) || (prev_c == 92));   //34 is a "   and 92 is a \ 

   input_stream.BeginToken();

  }
  catch (Throwable e)
  {
   //System.out.print("Error3 ");   //System.out.println(e.getMessage());
   //Reached End of File...most likely
  }
 }
private final int jjMoveStringLiteralDfa0_2()
{
   return jjMoveNfa_2(0, 0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
private final int jjMoveNfa_2(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x100000200L & l) == 0L)
                     break;
                  kind = 14;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private final int jjMoveNfa_1(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 13;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_3()
{
   return jjMoveNfa_3(0, 0);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_3(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffeffffffffL & l) == 0L)
                     break;
                  kind = 15;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  kind = 15;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 15)
                     kind = 15;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 21);
      default :
         return 1;
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1, long active2)
{
   switch (pos)
   {
      case 0:
         if ((active2 & 0x2000000L) != 0L)
            return 108;
         if ((active0 & 0x440L) != 0L)
            return 21;
         if ((active1 & 0xfffffffffffffc00L) != 0L || (active2 & 0xffL) != 0L)
         {
            jjmatchedKind = 152;
            return 59;
         }
         if ((active0 & 0x1000000000L) != 0L || (active1 & 0x140L) != 0L)
            return 27;
         return -1;
      case 1:
         if ((active1 & 0x1001800000L) != 0L)
            return 59;
         if ((active1 & 0xffffffeffe7ffc00L) != 0L || (active2 & 0xffL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 1;
            }
            return 59;
         }
         return -1;
      case 2:
         if ((active1 & 0xeffffbadff7ff800L) != 0L || (active2 & 0xffL) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 2;
            return 59;
         }
         if ((active1 & 0x1000044200000400L) != 0L)
            return 59;
         return -1;
      case 3:
         if ((active1 & 0xebfffb25f37e9000L) != 0L || (active2 & 0xefL) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 3;
            return 59;
         }
         if ((active1 & 0x40000880c016800L) != 0L || (active2 & 0x10L) != 0L)
            return 59;
         return -1;
      case 4:
         if ((active1 & 0x8040001000e9000L) != 0L || (active2 & 0x85L) != 0L)
            return 59;
         if ((active1 & 0xe3fbfb24f3700000L) != 0L || (active2 & 0x6aL) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 4;
            }
            return 59;
         }
         return -1;
      case 5:
         if ((active1 & 0xa201bb0092380000L) != 0L || (active2 & 0x6aL) != 0L)
         {
            if (jjmatchedPos != 5)
            {
               jjmatchedKind = 152;
               jjmatchedPos = 5;
            }
            return 59;
         }
         if ((active1 & 0x41fa402461400000L) != 0L)
            return 59;
         return -1;
      case 6:
         if ((active1 & 0x8241aa0012180000L) != 0L || (active2 & 0x22L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 6;
            return 59;
         }
         if ((active1 & 0x2000110080200000L) != 0L || (active2 & 0x48L) != 0L)
            return 59;
         return -1;
      case 7:
         if ((active1 & 0x8200880010100000L) != 0L || (active2 & 0x22L) != 0L)
            return 59;
         if ((active1 & 0x41220002080000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 7;
            return 59;
         }
         return -1;
      case 8:
         if ((active1 & 0x41000002080000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 8;
            return 59;
         }
         if ((active1 & 0x220000000000L) != 0L)
            return 59;
         return -1;
      case 9:
         if ((active1 & 0x41000002000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 9;
            return 59;
         }
         if ((active1 & 0x80000L) != 0L)
            return 59;
         return -1;
      case 10:
         if ((active1 & 0x40000000000000L) != 0L)
            return 59;
         if ((active1 & 0x1000002000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 10;
            return 59;
         }
         return -1;
      case 11:
         if ((active1 & 0x2000000L) != 0L)
            return 59;
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 11;
            return 59;
         }
         return -1;
      case 12:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 12;
            return 59;
         }
         return -1;
      case 13:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 13;
            return 59;
         }
         return -1;
      case 14:
         if ((active1 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 152;
            jjmatchedPos = 14;
            return 59;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1, long active2)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1, active2), pos + 1);
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 13:
         return jjMoveStringLiteralDfa1_0(0x10L, 0x0L, 0x0L);
      case 33:
         jjmatchedKind = 69;
         return jjMoveStringLiteralDfa1_0(0x40000000000000L, 0x0L, 0x0L);
      case 34:
         return jjStartNfaWithStates_0(0, 153, 108);
      case 35:
         return jjMoveStringLiteralDfa1_0(0x440L, 0x0L, 0x0L);
      case 37:
         jjmatchedKind = 65;
         return jjMoveStringLiteralDfa1_0(0x10000000000L, 0x0L, 0x0L);
      case 38:
         jjmatchedKind = 52;
         return jjMoveStringLiteralDfa1_0(0x2200000000000L, 0x0L, 0x0L);
      case 40:
         return jjStopAtPos(0, 29);
      case 41:
         return jjStopAtPos(0, 30);
      case 42:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x4000000000L, 0x0L, 0x0L);
      case 43:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x4L, 0x0L);
      case 44:
         return jjStopAtPos(0, 34);
      case 45:
         jjmatchedKind = 62;
         return jjMoveStringLiteralDfa1_0(0x40000000000L, 0x288L, 0x0L);
      case 46:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x100L, 0x0L);
      case 47:
         jjmatchedKind = 64;
         return jjMoveStringLiteralDfa1_0(0x8000000300L, 0x0L, 0x0L);
      case 58:
         jjmatchedKind = 32;
         return jjMoveStringLiteralDfa1_0(0x80000000L, 0x0L, 0x0L);
      case 59:
         return jjStopAtPos(0, 33);
      case 60:
         jjmatchedKind = 55;
         return jjMoveStringLiteralDfa1_0(0xa00080000000000L, 0x0L, 0x0L);
      case 61:
         jjmatchedKind = 37;
         return jjMoveStringLiteralDfa1_0(0x20000000000000L, 0x0L, 0x0L);
      case 62:
         jjmatchedKind = 56;
         return jjMoveStringLiteralDfa1_0(0x1400100000000000L, 0x0L, 0x0L);
      case 63:
         return jjStopAtPos(0, 35);
      case 91:
         return jjStopAtPos(0, 27);
      case 92:
         return jjMoveStringLiteralDfa1_0(0x20L, 0x0L, 0x0L);
      case 93:
         return jjStopAtPos(0, 28);
      case 94:
         jjmatchedKind = 51;
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x0L, 0x0L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xc00L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3e00000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7c000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x780000000L, 0x0L);
      case 103:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x800000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x7000000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x60000000000L, 0x0L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x700000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x3800000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1fc000000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xfe00000000000000L, 0x0L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x7L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0x38L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x0L, 0xc0L);
      case 123:
         return jjStopAtPos(0, 25);
      case 124:
         jjmatchedKind = 50;
         return jjMoveStringLiteralDfa1_0(0x1800000000000L, 0x0L, 0x0L);
      case 125:
         return jjStopAtPos(0, 26);
      case 126:
         return jjStopAtPos(0, 68);
      default :
         return jjMoveNfa_0(22, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0, long active1, long active2)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1, active2);
      return 1;
   }
   switch(curChar)
   {
      case 10:
         if ((active0 & 0x10L) != 0L)
            return jjStopAtPos(1, 4);
         else if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 35:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 38:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStopAtPos(1, 49);
         break;
      case 42:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         break;
      case 43:
         if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(1, 66);
         break;
      case 45:
         if ((active1 & 0x8L) != 0L)
            return jjStopAtPos(1, 67);
         break;
      case 46:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L, active1, 0L, active2, 0L);
      case 47:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         break;
      case 58:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 60:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000L, active1, 0L, active2, 0L);
      case 61:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(1, 38);
         else if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(1, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(1, 40);
         else if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(1, 41);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(1, 42);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStopAtPos(1, 45);
         else if ((active0 & 0x400000000000L) != 0L)
            return jjStopAtPos(1, 46);
         else if ((active0 & 0x800000000000L) != 0L)
            return jjStopAtPos(1, 47);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStopAtPos(1, 53);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStopAtPos(1, 54);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStopAtPos(1, 57);
         else if ((active0 & 0x400000000000000L) != 0L)
            return jjStopAtPos(1, 58);
         break;
      case 62:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0x200L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000000c000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x203840000600000L, active2, 0L);
      case 102:
         if ((active1 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 100, 59);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xc04000000010000L, active2, 0x80L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x18000080000000L, active2, 0x8L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x104020000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x6008000000L, active2, 0x3L);
      case 111:
         if ((active1 & 0x800000L) != 0L)
         {
            jjmatchedKind = 87;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x8a011c2000L, active2, 0x30L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000300400001000L, active2, 0L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x400L, active2, 0x4L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe0000000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x410000000800L, active2, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x100000000000000L, active2, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x70000000L, active2, 0L);
      case 121:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0xe000000002000000L, active2, 0L);
      case 124:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStopAtPos(1, 48);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(0, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1, active2);
      return 2;
   }
   switch(curChar)
   {
      case 42:
         if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(2, 73);
         break;
      case 46:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(2, 36);
         break;
      case 61:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(2, 43);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStopAtPos(2, 44);
         break;
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x60000000030000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x400000000000L, active2, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0x80000001000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200000L, active2, 0L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x8800000000000L, active2, 0L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0L, active2, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x501100400000000L, active2, 0x95L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2000400000L, active2, 0x20L);
      case 109:
         if ((active1 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(2, 74, 59);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x200020000000000L, active2, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x80821c0000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4200100002000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0xe000000030000000L, active2, 0L);
      case 114:
         if ((active1 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(2, 97, 59);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x880000000000000L, active2, 0x8L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4004000L, active2, 0x2L);
      case 116:
         if ((active1 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 102, 59);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x2010840008800L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x9000000L, active2, 0L);
      case 119:
         if ((active1 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 106, 59);
         break;
      case 121:
         if ((active1 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 124, 59);
         break;
      case 122:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(1, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1, active2);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x10182201000L, active2, 0x60L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x1000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x8000L, active2, 0L);
      case 100:
         if ((active2 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 132, 59);
         break;
      case 101:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 78, 59);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 90, 59);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe010020440400000L, active2, 0L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0x400L, active1, 0L, active2, 0L);
      case 103:
         if ((active1 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 103, 59);
         break;
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x802000000000L, active2, 0x2L);
      case 108:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 59);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x400010000000L, active2, 0x80L);
      case 109:
         if ((active1 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 91, 59);
         break;
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x9000000000000L, active2, 0x4L);
      case 111:
         if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 59);
         else if ((active1 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 99, 59);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x800000020000000L, active2, 0x1L);
      case 112:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 80, 59);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x4080000000000L, active2, 0L);
      case 115:
         if ((active1 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 122, 59);
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0xe0000L, active2, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x160200000100000L, active2, 0x8L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x82000000000000L, active2, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x100000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(2, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1, active2);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180000000000L, active2, 0L);
      case 98:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x180000000000000L, active2, 0L);
      case 100:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000000000000L, active2, 0L);
      case 101:
         if ((active2 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(4, 135, 59);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8200000000000L, active2, 0L);
      case 103:
         if ((active2 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(4, 130, 59);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0L, active2, 0x2L);
      case 104:
         if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(4, 79, 59);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x400L, active1, 0x4060400010100000L, active2, 0L);
      case 107:
         if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(4, 76, 59);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000081000000L, active2, 0L);
      case 109:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 110:
         if ((active2 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(4, 128, 59);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8000002400000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10000000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x2000060000000L, active2, 0x40L);
      case 115:
         if ((active1 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 81, 59);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x820000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x40000L) != 0L)
         {
            jjmatchedKind = 82;
            jjmatchedPos = 4;
         }
         else if ((active1 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(4, 96, 59);
         else if ((active1 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 114, 59);
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1000000480000L, active2, 0x20L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x200000L, active2, 0x8L);
      case 119:
         if ((active1 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 123, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(3, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1, active2);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80000L, active2, 0x40L);
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x8200000000000000L, active2, 0x8L);
      case 99:
         if ((active1 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 110, 59);
         else if ((active1 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 117;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40200010000000L, active2, 0L);
      case 100:
         if ((active1 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 98, 59);
         else if ((active1 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 115, 59);
         else if ((active1 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 126, 59);
         break;
      case 101:
         if ((active1 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 86, 59);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 88, 59);
         else if ((active1 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 101, 59);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2001000000000000L, active2, 0L);
      case 102:
         if ((active1 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 116, 59);
         break;
      case 104:
         if ((active1 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 120, 59);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2000000L, active2, 0x20L);
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10080200000L, active2, 0L);
      case 110:
         if ((active1 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 94, 59);
         else if ((active1 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 113, 59);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0x100000L, active2, 0x2L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(5, 93, 59);
         else if ((active1 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 119, 59);
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x980000000000L, active2, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(4, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1, active2);
      return 6;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000000000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x20000000000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2080000L, active2, 0L);
      case 101:
         if ((active1 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 104, 59);
         else if ((active1 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 108, 59);
         return jjMoveStringLiteralDfa7_0(active0, 0x400L, active1, 0x800000000000L, active2, 0x2L);
      case 102:
         if ((active1 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 125, 59);
         break;
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x10000000L, active2, 0L);
      case 108:
         if ((active2 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(6, 131, 59);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0L, active2, 0x20L);
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x8000000000000000L, active2, 0L);
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80000000000L, active2, 0L);
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 116:
         if ((active1 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(6, 85, 59);
         else if ((active2 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(6, 134, 59);
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x200200000000000L, active2, 0L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x100000L, active2, 0L);
      case 121:
         if ((active1 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 95, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(5, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1, active2);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         break;
      case 95:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x2000000L, active2, 0L);
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x80000L, active2, 0L);
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x40020000000000L, active2, 0L);
      case 100:
         if ((active2 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(7, 129, 59);
         break;
      case 101:
         if ((active1 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 84, 59);
         else if ((active1 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 121, 59);
         else if ((active1 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 127, 59);
         else if ((active2 & 0x20L) != 0L)
            return jjStartNfaWithStates_0(7, 133, 59);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000000000L, active2, 0L);
      case 112:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x1000000000000L, active2, 0L);
      case 114:
         if ((active1 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 107, 59);
         else if ((active1 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 111, 59);
         break;
      case 116:
         if ((active1 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 92, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1, active2);
}
private final int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1, long old2, long active2)
{
   if (((active0 &= old0) | (active1 &= old1) | (active2 &= old2)) == 0L)
      return jjStartNfa_0(6, old0, old1, old2); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, 0L, active1, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa9_0(active1, 0x40000000000000L);
      case 99:
         return jjMoveStringLiteralDfa9_0(active1, 0x2000000L);
      case 100:
         if ((active1 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 109, 59);
         break;
      case 101:
         if ((active1 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 105, 59);
         break;
      case 114:
         return jjMoveStringLiteralDfa9_0(active1, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa9_0(active1, 0x80000L);
      default :
         break;
   }
   return jjStartNfa_0(7, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa9_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(7, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, 0L, active1, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa10_0(active1, 0x2000000L);
      case 101:
         return jjMoveStringLiteralDfa10_0(active1, 0x1000000000000L);
      case 115:
         return jjMoveStringLiteralDfa10_0(active1, 0x40000000000000L);
      case 116:
         if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(9, 83, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa10_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(8, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, 0L, active1, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa11_0(active1, 0x2000000L);
      case 116:
         if ((active1 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(10, 118, 59);
         return jjMoveStringLiteralDfa11_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(9, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa11_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(9, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, 0L, active1, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa12_0(active1, 0x1000000000000L);
      case 116:
         if ((active1 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(11, 89, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa12_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(10, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, 0L, active1, 0L);
      return 12;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa13_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(11, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa13_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(11, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, 0L, active1, 0L);
      return 13;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa14_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(12, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa14_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(12, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, 0L, active1, 0L);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         return jjMoveStringLiteralDfa15_0(active1, 0x1000000000000L);
      default :
         break;
   }
   return jjStartNfa_0(13, 0L, active1, 0L);
}
private final int jjMoveStringLiteralDfa15_0(long old1, long active1)
{
   if (((active1 &= old1)) == 0L)
      return jjStartNfa_0(13, 0L, old1, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, 0L, active1, 0L);
      return 15;
   }
   switch(curChar)
   {
      case 116:
         if ((active1 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(15, 112, 59);
         break;
      default :
         break;
   }
   return jjStartNfa_0(14, 0L, active1, 0L);
}
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 108;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 12)
                        kind = 12;
                  }
                  else if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 108:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 34)
                  {
                     if (kind > 151)
                        kind = 151;
                  }
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  else if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 39)
                     jjAddStates(9, 10);
                  else if (curChar == 46)
                     jjCheckNAdd(27);
                  else if (curChar == 35)
                     jjCheckNAddTwoStates(24, 25);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 140)
                        kind = 140;
                     jjCheckNAddStates(11, 18);
                  }
                  else if (curChar == 48)
                     jjAddStates(19, 22);
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 21;
                  if (curChar == 48)
                  {
                     if (kind > 136)
                        kind = 136;
                     jjCheckNAddStates(23, 30);
                  }
                  break;
               case 0:
                  if (curChar == 32)
                     jjAddStates(31, 32);
                  break;
               case 2:
                  if (curChar == 34)
                     jjCheckNAddStates(33, 35);
                  break;
               case 3:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 5:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 6:
                  if (curChar == 34 && kind > 11)
                     kind = 11;
                  break;
               case 7:
                  if (curChar == 48)
                     jjCheckNAddStates(36, 39);
                  break;
               case 8:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(36, 39);
                  break;
               case 9:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(40, 43);
                  break;
               case 11:
                  if (curChar == 48)
                     jjAddStates(44, 45);
                  break;
               case 13:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 23:
                  if (curChar == 35)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 24:
                  if ((0x100000200L & l) != 0L)
                     jjCheckNAddTwoStates(24, 25);
                  break;
               case 25:
                  if ((0x3ff000000000000L & l) != 0L && kind > 12)
                     kind = 12;
                  break;
               case 26:
                  if (curChar == 46)
                     jjCheckNAdd(27);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(50, 52);
                  break;
               case 29:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(30);
                  break;
               case 30:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddTwoStates(30, 31);
                  break;
               case 32:
                  if (curChar == 39)
                     jjAddStates(9, 10);
                  break;
               case 33:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 34:
                  if (curChar == 39 && kind > 150)
                     kind = 150;
                  break;
               case 36:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 37:
                  if (curChar == 48)
                     jjCheckNAddTwoStates(38, 34);
                  break;
               case 38:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(38, 34);
                  break;
               case 39:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 34);
                  break;
               case 40:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(40, 34);
                  break;
               case 41:
                  if (curChar == 48)
                     jjAddStates(53, 54);
                  break;
               case 43:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(43, 34);
                  break;
               case 45:
                  if (curChar == 34)
                     jjCheckNAddStates(0, 2);
                  break;
               case 46:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 48:
                  if ((0x8000008400000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 49:
                  if (curChar == 34 && kind > 151)
                     kind = 151;
                  break;
               case 50:
                  if (curChar == 48)
                     jjCheckNAddStates(55, 58);
                  break;
               case 51:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(55, 58);
                  break;
               case 52:
                  if ((0x3fe000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 53:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(59, 62);
                  break;
               case 54:
                  if (curChar == 48)
                     jjAddStates(63, 64);
                  break;
               case 56:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(65, 68);
                  break;
               case 59:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 60:
                  if (curChar != 48)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAddStates(23, 30);
                  break;
               case 61:
                  if ((0xff000000000000L & l) == 0L)
                     break;
                  if (kind > 136)
                     kind = 136;
                  jjCheckNAdd(61);
                  break;
               case 62:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(62, 63);
                  break;
               case 64:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 66:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(69, 71);
                  break;
               case 71:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAddStates(11, 18);
                  break;
               case 72:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 140)
                     kind = 140;
                  jjCheckNAdd(72);
                  break;
               case 73:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(73, 74);
                  break;
               case 75:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 77:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(72, 74);
                  break;
               case 82:
                  if (curChar == 48)
                     jjAddStates(19, 22);
                  break;
               case 84:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjAddStates(75, 76);
                  break;
               case 89:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 92:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjAddStates(79, 81);
                  break;
               case 97:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddStates(3, 8);
                  break;
               case 98:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(98, 99);
                  break;
               case 99:
                  if (curChar != 46)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(82, 84);
                  break;
               case 100:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 148)
                     kind = 148;
                  jjCheckNAddStates(82, 84);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 26);
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(102, 103);
                  break;
               case 104:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(105);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 149)
                     kind = 149;
                  jjCheckNAddTwoStates(105, 106);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 21:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 108:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  else if (curChar == 92)
                     jjAddStates(85, 88);
                  break;
               case 22:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 152)
                        kind = 152;
                     jjCheckNAdd(59);
                  }
                  if (curChar == 76)
                     jjAddStates(89, 90);
                  break;
               case 1:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 3:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 4:
                  if (curChar == 92)
                     jjAddStates(91, 94);
                  break;
               case 5:
                  if ((0x174404610000000L & l) != 0L)
                     jjCheckNAddStates(33, 35);
                  break;
               case 12:
                  if (curChar == 120)
                     jjCheckNAdd(13);
                  break;
               case 13:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(46, 49);
                  break;
               case 14:
                  if (curChar == 88)
                     jjCheckNAdd(13);
                  break;
               case 15:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 16:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 18:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 28:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(95, 96);
                  break;
               case 31:
                  if ((0x104000001040L & l) != 0L && kind > 148)
                     kind = 148;
                  break;
               case 33:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 35:
                  if (curChar == 92)
                     jjAddStates(97, 100);
                  break;
               case 36:
                  if ((0x174404610000000L & l) != 0L)
                     jjCheckNAdd(34);
                  break;
               case 42:
                  if (curChar == 120)
                     jjCheckNAdd(43);
                  break;
               case 43:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(43, 34);
                  break;
               case 44:
                  if (curChar == 88)
                     jjCheckNAdd(43);
                  break;
               case 46:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 47:
                  if (curChar == 92)
                     jjAddStates(85, 88);
                  break;
               case 48:
                  if ((0x174404610000000L & l) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 55:
                  if (curChar == 120)
                     jjCheckNAdd(56);
                  break;
               case 56:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(65, 68);
                  break;
               case 57:
                  if (curChar == 88)
                     jjCheckNAdd(56);
                  break;
               case 58:
               case 59:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 152)
                     kind = 152;
                  jjCheckNAdd(59);
                  break;
               case 63:
                  if ((0x100000001000L & l) != 0L && kind > 137)
                     kind = 137;
                  break;
               case 65:
                  if ((0x20000000200000L & l) != 0L && kind > 138)
                     kind = 138;
                  break;
               case 67:
                  if ((0x100000001000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 68:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if ((0x20000000200000L & l) != 0L && kind > 139)
                     kind = 139;
                  break;
               case 70:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 69;
                  break;
               case 74:
                  if ((0x20100000201000L & l) != 0L && kind > 141)
                     kind = 141;
                  break;
               case 76:
                  if ((0x20000000200000L & l) != 0L && kind > 142)
                     kind = 142;
                  break;
               case 78:
                  if ((0x100000001000L & l) != 0L && kind > 143)
                     kind = 143;
                  break;
               case 79:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if ((0x20000000200000L & l) != 0L && kind > 143)
                     kind = 143;
                  break;
               case 81:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 83:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(84);
                  break;
               case 84:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 144)
                     kind = 144;
                  jjCheckNAdd(84);
                  break;
               case 85:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(86);
                  break;
               case 86:
                  if ((0x7e0000007eL & l) == 0L)
                     break;
                  if (kind > 145)
                     kind = 145;
                  jjCheckNAddTwoStates(86, 87);
                  break;
               case 87:
                  if ((0x20100000201000L & l) != 0L && kind > 145)
                     kind = 145;
                  break;
               case 88:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(89);
                  break;
               case 89:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddTwoStates(89, 90);
                  break;
               case 90:
                  if ((0x20000000200000L & l) != 0L && kind > 146)
                     kind = 146;
                  break;
               case 91:
                  if ((0x100000001000000L & l) != 0L)
                     jjCheckNAdd(92);
                  break;
               case 92:
                  if ((0x7e0000007eL & l) != 0L)
                     jjCheckNAddStates(79, 81);
                  break;
               case 93:
                  if ((0x100000001000L & l) != 0L && kind > 147)
                     kind = 147;
                  break;
               case 94:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if ((0x20000000200000L & l) != 0L && kind > 147)
                     kind = 147;
                  break;
               case 96:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(101, 102);
                  break;
               case 106:
                  if ((0x104000001040L & l) != 0L && kind > 149)
                     kind = 149;
                  break;
               case 107:
                  if (curChar == 76)
                     jjAddStates(89, 90);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 108:
               case 46:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(0, 2);
                  break;
               case 3:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(33, 35);
                  break;
               case 33:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 108 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 19);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_8(0x800000L);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(1, 23);
         break;
      default :
         return 2;
   }
   return 2;
}
private final int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 10:
         return jjStopAtPos(0, 16);
      default :
         return 1;
   }
}
private final int jjMoveStringLiteralDfa0_5()
{
   return 1;
}
static final int[] jjnextStates = {
   46, 47, 49, 98, 99, 101, 26, 102, 103, 33, 35, 72, 73, 74, 75, 76, 
   77, 79, 81, 83, 85, 88, 91, 61, 62, 63, 64, 65, 66, 68, 70, 1, 
   2, 3, 4, 6, 3, 4, 8, 6, 3, 4, 10, 6, 12, 14, 3, 4, 
   13, 6, 27, 28, 31, 42, 44, 46, 47, 51, 49, 46, 47, 53, 49, 55, 
   57, 46, 47, 56, 49, 66, 68, 70, 77, 79, 81, 86, 87, 89, 90, 92, 
   94, 96, 100, 28, 31, 48, 50, 52, 54, 32, 45, 5, 7, 9, 11, 29, 
   30, 36, 37, 39, 41, 104, 105, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\173", 
"\175", "\133", "\135", "\50", "\51", "\72\72", "\72", "\73", "\54", "\77", 
"\56\56\56", "\75", "\52\75", "\57\75", "\45\75", "\53\75", "\55\75", "\74\74\75", 
"\76\76\75", "\46\75", "\136\75", "\174\75", "\174\174", "\46\46", "\174", "\136", "\46", 
"\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\74\74", "\76\76", "\53", "\55", 
"\52", "\57", "\45", "\53\53", "\55\55", "\176", "\41", "\56", "\55\76", "\56\52", 
"\55\76\52", "\141\163\155", "\141\165\164\157", "\142\162\145\141\153", 
"\142\157\157\154", "\143\141\163\145", "\143\141\164\143\150", "\143\150\141\162", 
"\143\154\141\163\163", "\143\157\156\163\164", "\143\157\156\163\164\137\143\141\163\164", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\145\154\145\164\145", "\144\157", 
"\144\157\165\142\154\145", "\144\171\156\141\155\151\143\137\143\141\163\164", "\145\154\163\145", 
"\145\156\165\155", "\145\170\160\154\151\143\151\164", "\145\170\160\157\162\164", 
"\145\170\164\145\162\156", "\146\151\156\141\154\154\171", "\146\154\157\141\164", "\146\157\162", 
"\146\162\151\145\156\144", "\147\157\164\157", "\151\146", "\151\156\154\151\156\145", "\151\156\164", 
"\154\157\156\147", "\155\165\164\141\142\154\145", "\156\141\155\145\163\160\141\143\145", 
"\156\145\167", "\157\160\145\162\141\164\157\162", "\160\162\151\166\141\164\145", 
"\160\162\157\164\145\143\164\145\144", "\160\165\142\154\151\143", "\162\145\147\151\163\164\145\162", 
"\162\145\151\156\164\145\162\160\162\145\164\137\143\141\163\164", "\162\145\164\165\162\156", "\163\150\157\162\164", 
"\163\151\147\156\145\144", "\163\151\172\145\157\146", "\163\164\141\164\151\143", 
"\163\164\141\164\151\143\137\143\141\163\164", "\163\164\162\165\143\164", "\163\167\151\164\143\150", 
"\164\145\155\160\154\141\164\145", "\164\150\151\163", "\164\150\162\157\167", "\164\162\171", 
"\164\171\160\145\144\145\146", "\164\171\160\145\151\144", "\164\171\160\145\156\141\155\145", 
"\165\156\151\157\156", "\165\156\163\151\147\156\145\144", "\165\163\151\156\147", 
"\166\151\162\164\165\141\154", "\166\157\151\144", "\166\157\154\141\164\151\154\145", 
"\167\143\150\141\162\137\164", "\167\150\151\154\145", null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, "\42", };
public static final String[] lexStateNames = {
   "DEFAULT", 
   "LINE_NUMBER", 
   "LINE_DIRECTIVE_SPACES", 
   "LINE_DIRECTIVE_FILE", 
   "LINE_DIRECTIVE_END", 
   "AFTER_LINE_DIRECTIVE", 
   "IN_DEFINE", 
   "IN_LINE_COMMENT", 
   "IN_COMMENT", 
};
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 6, -1, 1, 2, 3, 4, 5, -1, 0, 0, -1, 0, -1, 0, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffe000001L, 0xffffffffffffffffL, 0x3ffffffL, 
};
static final long[] jjtoSkip = {
   0xaffffeL, 0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1500000L, 0x0L, 0x0L, 
};
private ASCII_CharStream input_stream;
private final int[] jjrounds = new int[108];
private final int[] jjstateSet = new int[216];
StringBuffer image;
int jjimageLen;
int lengthOfMatch;
protected char curChar;
public ParserTokenManager(ASCII_CharStream stream)
{
   if (ASCII_CharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public ParserTokenManager(ASCII_CharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(ASCII_CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 108; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(ASCII_CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

private final Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   if (jjmatchedPos < 0)
   {
      t.image = "";
      t.beginLine = t.endLine = input_stream.getBeginLine();
      t.beginColumn = t.endColumn = input_stream.getBeginColumn();
   }
   else
   {
      String im = jjstrLiteralImages[jjmatchedKind];
      t.image = (im == null) ? input_stream.GetImage() : im;
      t.beginLine = input_stream.getBeginLine();
      t.beginColumn = input_stream.getBeginColumn();
      t.endLine = input_stream.getEndLine();
      t.endColumn = input_stream.getEndColumn();
   }
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public final Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }
   image = null;
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x104000600L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         jjmatchedKind = 14;
         jjmatchedPos = -1;
         curPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
       case 5:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         if (jjmatchedPos == 0 && jjmatchedKind > 18)
         {
            jjmatchedKind = 18;
         }
         break;
       case 6:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         if (jjmatchedPos == 0 && jjmatchedKind > 20)
         {
            jjmatchedKind = 20;
         }
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 22)
         {
            jjmatchedKind = 22;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 24)
         {
            jjmatchedKind = 24;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        jjimageLen += jjmatchedPos + 1;
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

final void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 11 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
     symtab.addIncludeFile(image.toString().substring(10,image.toString().length()-1).replace('?','\\'));
         break;
      case 12 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
                                      input_stream.backup(1);
         break;
      case 13 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
     try
     {
        beginLine = Integer.parseInt(image.toString());
        if (beginLine > 0) beginLine--; //Since the line directive really means that the next
                                        //Line is whatever image.toString is equal to
     }
     catch(NumberFormatException e) { }
         break;
      case 18 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
    input_stream.adjustBeginLineColumn(beginLine, 1);
    input_stream.backup(1);
         break;
      case 19 :
         if (image == null)
            image = new StringBuffer(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
         else
            image.append(new String(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1))));
   symtab.addObject(ParserSchema.dMacro,image.toString().trim(), input_stream.getEndLine(), false);
         break;
      default :
         break;
   }
}
}
