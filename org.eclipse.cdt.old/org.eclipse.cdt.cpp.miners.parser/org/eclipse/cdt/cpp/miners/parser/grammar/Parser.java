/* Generated By:JavaCC: Do not edit this line. Parser.java */
package com.ibm.cpp.miners.parser.grammar;

/*
 * Copyright (C) 2000, 2001 International Business Machines Corporation and others. All Rights Reserved.  
 */

import com.ibm.dstore.core.model.*;
import com.ibm.cpp.miners.parser.dstore.*;
import java.util.*;
import java.io.*;
import java.lang.*;

public final class Parser implements ParserConstants {
 private SymbolTable  symtab;
 private boolean      isConstructor;
 private String       empty = "";
 public Parser() {}
 public void setSymbolTable(SymbolTable theSymbolTable)
 {
  symtab = theSymbolTable;
 }

 //This is used to skip over exceptions in the file based parse.
 public boolean jumpToClosingCurly()
 {
  int number_of_curlies = 1;

  Token tok;
  try
  {
   tok = getToken(1);
  }
  catch (Throwable e)
   {
    token_source.jumpPastBadTokens();
    token_source.getInputStream().backupToken();
    return false;
   }
  if ((tok == null) || (tok.kind == EOF))
   return true;
  try
  {
   while ((tok != null) && (tok.kind != EOF) && (tok.kind != SEMICOLON) && (number_of_curlies > 0) )
   {
    if      (tok.kind == OPENCURLY)  number_of_curlies++;
    else if (tok.kind == CLOSECURLY) number_of_curlies--;
    else if (tok.kind == SEMICOLON)  number_of_curlies = 0;
    tok = getNextToken();
   }
   symtab.gotoGlobalScope();
  }
  catch (Throwable e)
  {
   return true;
  }
  return ((tok == null) || (tok.kind == EOF));
 }


 //This is used to skip over exceptions in the object based parse.
 public boolean jumpToNextDeclaration(String objectType)
 {
  //First calculate how far under the main parse Object we are:
  int depth = 0;
  DataElement theRoot = symtab.getRoot();
  if (theRoot == null)
   return true;
  while (!theRoot.getType().equals(objectType))
  {
   depth++;
   theRoot = theRoot.getParent();
  }

  //Now match }'s until we are at depth 0;
  try
  {
   Token tok = getToken(1);
   if (tok.kind == SEMICOLON)
    tok = getToken(2);
   if ((tok == null) || (tok.kind == EOF))
    return true;

   while (depth > 0)
   {
    if      (tok.kind == EOF)        return true;
    else if (tok.kind == OPENCURLY)  depth++;
    else if (tok.kind == CLOSECURLY) depth--;
    tok = getNextToken();
   }
   if (tok.kind == EOF)
    return true;

   //Now we are at depth 0, so we'll look for the next ;
   while (tok.kind != SEMICOLON)
   {
    if (tok.kind == EOF) return true;
    tok = getNextToken();
   }
   //When we get here, we are at a semi-colon, so step over it, and we're done:
   //tok = getNextToken();
  } catch (Throwable e)
    {
     //System.out.print("Error2 ");
     //System.out.println(e.getMessage());}
    }
  return false;
 }

 //This method takes a string containing a bunch of type names and a declaration name and returns just the 
 //type names and the Declarator split into an Array
 //So if "const char *c" is passed in,  just "const char" is list[1] and "*c" is list[0];
 public String[] parseDeclaration(String theTypes)
 {
  //First find the last word...
  int division = theTypes.lastIndexOf(" ");

  //Now move the division point past any ptr operators that may be next to the name (e.g. int **f1(a,b)):
  int lastPtr = theTypes.lastIndexOf("*");
  if (lastPtr > division)
   division = lastPtr;
  lastPtr = theTypes.lastIndexOf("&");
  if (lastPtr > division)
   division = lastPtr;


  String[] theArray = new String[2];
  if (division < 1)
  {
   theArray[0] = theTypes.trim();  //All name...no types
   theArray[1] = empty;
  }
  else
  {
   theArray[0] = theTypes.substring(division + 1, theTypes.length()).trim();
   theArray[1] = theTypes.substring(0, division + 1).trim();
  }
  return theArray;
 }

//START OF GRAMMAR DEFINITION

//This is the root production that starts a file-based parse...The rest of the 
//productions below are a mixture of productions from the CPlusPlus sample
//that comes with javacc and productions based on the C++ Standard 
//(mostly the latter).
  final public void translation_unit() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCOPE:
      case SEMICOLON:
      case AMPERSAND:
      case STAR:
      case ASM:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXPLICIT:
      case EXPORT:
      case EXTERN:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NAMESPACE:
      case OPERATOR:
      case REGISTER:
      case SHORT:
      case SIGNED:
      case STATIC:
      case STRUCT:
      case TEMPLATE:
      case THIS:
      case TYPEDEF:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      declaration();
    }
    jj_consume_token(0);
  }

//This production is key in terms of performance...It is really the base production
//used to parse each declaration.  We have to be really careful about how we use 
//LOOKAHEAD here because this method is called so many times.  So the basic idea 
//is that I try to determine 1,2 or at most 3 tokens (based on the C++ standard),
//to lookahead to decide what type of declaration we are dealing with.
  final public void declaration() throws ParseException {
 String theTypes = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TEMPLATE:
      jj_consume_token(TEMPLATE);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case GREATERTHAN:
          jj_consume_token(GREATERTHAN);
          declaration();
          break;
        case SCOPE:
        case ELLIPSIS:
        case AMPERSAND:
        case STAR:
        case AUTO:
        case BOOL:
        case CHAR:
        case CLASS:
        case CONST:
        case DOUBLE:
        case ENUM:
        case EXPLICIT:
        case FLOAT:
        case FRIEND:
        case INLINE:
        case INT:
        case LONG:
        case MUTABLE:
        case OPERATOR:
        case REGISTER:
        case SHORT:
        case SIGNED:
        case STATIC:
        case STRUCT:
        case THIS:
        case TYPEDEF:
        case TYPENAME:
        case UNION:
        case UNSIGNED:
        case VIRTUAL:
        case VOID:
        case VOLATILE:
        case WCHAR_T:
        case ID:
          template_declaration();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case SCOPE:
      case SEMICOLON:
      case AMPERSAND:
      case STAR:
      case ASM:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXPLICIT:
      case EXPORT:
      case EXTERN:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NAMESPACE:
      case OPERATOR:
      case REGISTER:
      case SHORT:
      case SIGNED:
      case STATIC:
      case STRUCT:
      case TEMPLATE:
      case THIS:
      case TYPEDEF:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case ID:
        declaration();
        break;
      default:
        jj_la1[2] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      jj_consume_token(GREATERTHAN);
      template_declaration();
      break;
    case EXTERN:
      jj_consume_token(EXTERN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STRING:
        jj_consume_token(STRING);
        linkage_specification();
        break;
      default:
        jj_la1[3] = jj_gen;
        ;
      }
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      namespace_definition();
      break;
    case USING:
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        using_directive();
        break;
      case SCOPE:
      case TYPENAME:
      case ID:
        using_declaration();
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ASM:
      jj_consume_token(ASM);
      asm_definition();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case SCOPE:
    case AMPERSAND:
    case STAR:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      theTypes = declaration_specifiers();
      if (theTypes == null)
       {if (true) return;}
      if (jj_2_1(2147483647)) {
        function_definition(theTypes);
      } else {
        simple_declaration(theTypes);
      }
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String declaration_specifiers() throws ParseException {
 String name = empty, next = empty;
    name = declaration_specifier();
  if (name == null)
   {if (true) return null;}
    label_2:
    while (true) {
      if (jj_2_2(2)) {
        ;
      } else {
        break label_2;
      }
      next = declaration_specifier();
  if (next == null)
   {if (true) return null;}
  name += " " + next;
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String declaration_specifier() throws ParseException {
 String name = null, next; boolean classSpecFound = false; boolean semicolonFound = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLASS:
    case STRUCT:
    case UNION:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLASS:
        jj_consume_token(CLASS);
        break;
      case STRUCT:
        jj_consume_token(STRUCT);
        break;
      case UNION:
        jj_consume_token(UNION);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                     name = getToken(0).image;
      if (jj_2_3(2147483647)) {
        next = class_specifier();
                                     name += " " + next;
      } else {
        ;
      }
      if (jj_2_4(2147483647)) {
        jj_consume_token(SEMICOLON);
                                                         semicolonFound = true;
      } else {
        ;
      }
                                      if ((semicolonFound) || (getToken(0).image.equals(";"))) {if (true) return null;}
      break;
    case ENUM:
      jj_consume_token(ENUM);
               name = "enum";
      if (jj_2_5(2147483647)) {
        next = enum_specifier();
                                                                               name += " " + next;
      } else {
        ;
      }
      if (jj_2_6(2147483647)) {
        jj_consume_token(SEMICOLON);
                                   {if (true) return null;}
      } else {
        ;
      }
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case SIGNED:
      jj_consume_token(SIGNED);
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      break;
    case WCHAR_T:
      jj_consume_token(WCHAR_T);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
      break;
    case AUTO:
      jj_consume_token(AUTO);
      break;
    case REGISTER:
      jj_consume_token(REGISTER);
      break;
    case STATIC:
      jj_consume_token(STATIC);
      break;
    case MUTABLE:
      jj_consume_token(MUTABLE);
      break;
    case INLINE:
      jj_consume_token(INLINE);
      break;
    case VIRTUAL:
      jj_consume_token(VIRTUAL);
      break;
    case EXPLICIT:
      jj_consume_token(EXPLICIT);
      break;
    case FRIEND:
      jj_consume_token(FRIEND);
      break;
    case TYPEDEF:
      jj_consume_token(TYPEDEF);
                 symtab.objectIsTypedef(); name = empty;
      break;
    case TYPENAME:
      jj_consume_token(TYPENAME);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      name = optor();
                                name = "operator" + name;
      break;
    default:
      jj_la1[9] = jj_gen;
      if (jj_2_10(2147483647)) {
        nested_name_specifier();
        if (jj_2_7(2)) {
          jj_consume_token(TEMPLATE);
        } else {
          ;
        }
        if (jj_2_8(2)) {
          name = identifier();
        } else {
          ;
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOPE:
        case THIS:
        case ID:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SCOPE:
            jj_consume_token(SCOPE);
            break;
          default:
            jj_la1[7] = jj_gen;
            ;
          }
          if (jj_2_9(2147483647)) {
            nested_name_specifier();
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case TEMPLATE:
              jj_consume_token(TEMPLATE);
              break;
            default:
              jj_la1[8] = jj_gen;
              ;
            }
          } else {
            ;
          }
          name = identifier();
          break;
        default:
          jj_la1[10] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
   if (name == null)
    name = getToken(0).image;
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

//The declaration_specifiers have already been matched when we get here:
  final public void member_function_definition_lookahead() throws ParseException {
    label_3:
    while (true) {
      if (jj_2_11(2)) {
        ;
      } else {
        break label_3;
      }
      ptr_operator();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
    case TILDE:
    case OPERATOR:
    case THIS:
    case ID:
      id_expression();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(OPENPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSEPAREN:
      jj_consume_token(CLOSEPAREN);
      break;
    default:
      jj_la1[12] = jj_gen;
      if (jj_2_12(3)) {
        parameter_list(false);
        jj_consume_token(CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENPAREN:
        case SCOPE:
        case AMPERSAND:
        case PLUS:
        case MINUS:
        case STAR:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case SIZEOF:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          expression();
          jj_consume_token(CLOSEPAREN);
          break;
        default:
          jj_la1[13] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case COLON:
      jj_consume_token(COLON);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      break;
    case TRY:
      jj_consume_token(TRY);
      break;
    case ASSIGNEQUAL:
      jj_consume_token(ASSIGNEQUAL);
      break;
    case CONST:
      jj_consume_token(CONST);
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//The declaration_specifiers have already been matched when we get here:
  final public void function_definition_lookahead() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_13(2)) {
        ;
      } else {
        break label_4;
      }
      ptr_operator();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
    case TILDE:
    case OPERATOR:
    case THIS:
    case ID:
      id_expression();
      break;
    default:
      jj_la1[15] = jj_gen;
      ;
    }
    jj_consume_token(OPENPAREN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CLOSEPAREN:
      jj_consume_token(CLOSEPAREN);
      break;
    default:
      jj_la1[16] = jj_gen;
      if (jj_2_14(3)) {
        parameter_list(false);
        jj_consume_token(CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENPAREN:
        case SCOPE:
        case AMPERSAND:
        case PLUS:
        case MINUS:
        case STAR:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case SIZEOF:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          expression();
          jj_consume_token(CLOSEPAREN);
          break;
        default:
          jj_la1[17] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      jj_consume_token(COLON);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      break;
    case TRY:
      jj_consume_token(TRY);
      break;
    case ASSIGNEQUAL:
      jj_consume_token(ASSIGNEQUAL);
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case SCOPE:
    case AMPERSAND:
    case STAR:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      declaration_specifier();
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//The declaration_specifiers have already been matched when we get here:
  final public void simple_declaration(String theTypes) throws ParseException {
    init_declarator_list(theTypes);
  }

//The "template <" keywords have already been matched when we get here:
  final public void template_declaration() throws ParseException {
    template_parameter_list();
    jj_consume_token(GREATERTHAN);
    declaration();
  }

//The "extern" <STRING> keywords have already been matched when we get here:
  final public void linkage_specification() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOPE:
        case SEMICOLON:
        case AMPERSAND:
        case STAR:
        case ASM:
        case AUTO:
        case BOOL:
        case CHAR:
        case CLASS:
        case CONST:
        case DOUBLE:
        case ENUM:
        case EXPLICIT:
        case EXPORT:
        case EXTERN:
        case FLOAT:
        case FRIEND:
        case INLINE:
        case INT:
        case LONG:
        case MUTABLE:
        case NAMESPACE:
        case OPERATOR:
        case REGISTER:
        case SHORT:
        case SIGNED:
        case STATIC:
        case STRUCT:
        case TEMPLATE:
        case THIS:
        case TYPEDEF:
        case TYPENAME:
        case UNION:
        case UNSIGNED:
        case USING:
        case VIRTUAL:
        case VOID:
        case VOLATILE:
        case WCHAR_T:
        case ID:
          ;
          break;
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        declaration();
      }
      jj_consume_token(CLOSECURLY);
      break;
    case SCOPE:
    case SEMICOLON:
    case AMPERSAND:
    case STAR:
    case ASM:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case EXPORT:
    case EXTERN:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case NAMESPACE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case TEMPLATE:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case USING:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      declaration();
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//The "namespace" keyword has already been matched when we get here:
  final public void namespace_definition() throws ParseException {
 String name = empty, next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case ID:
      name = identifier();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        next = id_expression();
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[22] = jj_gen;
       name = UnnamedTypeManager.instance().getNextUnnamedType("namespace");
    }
   DataElement theNamespace = symtab.addObject(ParserSchema.dNamespace, name, getToken(0).beginLine, true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
        symtab.closeScope();
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      skip_object_body(theNamespace);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void namespace_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 0:
      case SCOPE:
      case SEMICOLON:
      case AMPERSAND:
      case STAR:
      case ASM:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXPLICIT:
      case EXPORT:
      case EXTERN:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NAMESPACE:
      case OPERATOR:
      case REGISTER:
      case SHORT:
      case SIGNED:
      case STATIC:
      case STRUCT:
      case TEMPLATE:
      case THIS:
      case TYPEDEF:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case ID:
        translation_unit();
        break;
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      jj_consume_token(CLOSECURLY);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   symtab.closeScope();
  }

//The "using namespace" keywords have already been matched when we get here:
  final public void using_directive() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
    if (jj_2_15(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    jj_consume_token(ID);
  }

//The "using" keyword has already been matched when we get here:
  final public void using_declaration() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TYPENAME:
      jj_consume_token(TYPENAME);
      break;
    default:
      jj_la1[27] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    if (jj_2_16(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    jj_consume_token(ID);
  }

//The "asm" keyword has already been matched when we get here:
  final public void asm_definition() throws ParseException {
    jj_consume_token(OPENPAREN);
    jj_consume_token(153);
    skip_string_literal();
    jj_consume_token(CLOSEPAREN);
    jj_consume_token(SEMICOLON);
  }

//The declaration_specifiers have already been matched when we get here:
  final public void function_definition(String theTypes) throws ParseException {
 String name;
  isConstructor = (theTypes.indexOf(" ") == -1);
    if (jj_2_19(2)) {
      jj_consume_token(TILDE);
      constructor_destructor_definition(theTypes, ParserSchema.Destructor);
    } else if (isConstructor) {
      constructor_destructor_definition(theTypes, ParserSchema.Constructor);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENSQUARE:
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case STAR:
      case TILDE:
      case OPERATOR:
      case THIS:
      case ID:
        name = declarator(ParserSchema.Function);
      String [] names = parseDeclaration(theTypes);
      symtab.addFunctionReturnTypes(names[1]);
      name = names[0] + name;
      DataElement funcType = ParserSchema.dFunction;
      if (names[0].equals("main"))
       funcType = ParserSchema.dMainFunction;
      DataElement theFunction = symtab.addObject(funcType, names[0], name, getToken(0).beginLine, true);
        if (jj_2_18(2)) {
          jj_consume_token(SEMICOLON);
                           symtab.closeScope();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case ASSIGNEQUAL:
            jj_consume_token(ASSIGNEQUAL);
            constant_expression();
                                    symtab.closeScope();
            break;
          case OPENCURLY:
          case SCOPE:
          case SEMICOLON:
          case AMPERSAND:
          case STAR:
          case ASM:
          case AUTO:
          case BOOL:
          case CHAR:
          case CLASS:
          case CONST:
          case DOUBLE:
          case ENUM:
          case EXPLICIT:
          case EXPORT:
          case EXTERN:
          case FLOAT:
          case FRIEND:
          case INLINE:
          case INT:
          case LONG:
          case MUTABLE:
          case NAMESPACE:
          case OPERATOR:
          case REGISTER:
          case SHORT:
          case SIGNED:
          case STATIC:
          case STRUCT:
          case TEMPLATE:
          case THIS:
          case TYPEDEF:
          case TYPENAME:
          case UNION:
          case UNSIGNED:
          case USING:
          case VIRTUAL:
          case VOID:
          case VOLATILE:
          case WCHAR_T:
          case ID:
            label_6:
            while (true) {
              if (jj_2_17(2)) {
                ;
              } else {
                break label_6;
              }
              declaration();
            }
            jj_consume_token(OPENCURLY);
            skip_object_body(theFunction);
            break;
          default:
            jj_la1[29] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      default:
        jj_la1[30] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void function_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENCURLY:
      case OPENPAREN:
      case SCOPE:
      case SEMICOLON:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case ASM:
      case AUTO:
      case BREAK:
      case BOOL:
      case CASE:
      case CHAR:
      case CLASS:
      case CONST:
      case CONST_CAST:
      case CONTINUE:
      case _DEFAULT:
      case DELETE:
      case DO:
      case DOUBLE:
      case DYNAMIC_CAST:
      case ENUM:
      case EXPLICIT:
      case FLOAT:
      case FOR:
      case FRIEND:
      case GOTO:
      case IF:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NAMESPACE:
      case NEW:
      case OPERATOR:
      case REGISTER:
      case REINTERPET_CAST:
      case RETURN:
      case SHORT:
      case SIGNED:
      case SIZEOF:
      case STATIC:
      case STATIC_CAST:
      case STRUCT:
      case SWITCH:
      case THIS:
      case THROW:
      case TRY:
      case TYPEDEF:
      case TYPEID:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case WHILE:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        statement_list();
        break;
      default:
        jj_la1[31] = jj_gen;
        ;
      }
      jj_consume_token(CLOSECURLY);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   symtab.closeScope();
  }

  final public void init_declarator_list(String theTypes) throws ParseException {
 String name = empty; int startLine = getToken(1).beginLine; boolean firstTime = true;
    name = init_declarator();
   if (theTypes != null)
   {
    name = theTypes + " " + name;
    Token t = getToken(1);
    if ( (t!=null) && ( (t.kind==COMMA) || (t.kind==SEMICOLON)))
     symtab.addObject(ParserSchema.dVariable, name, startLine,false);
   }
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[33] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
     if ((firstTime) && (theTypes != null))
     {
      theTypes = parseDeclaration(theTypes)[1];
      firstTime = false;
     }
      name = init_declarator();
     if (theTypes != null)
     {
      name = theTypes + " " + name;
      symtab.addObject(ParserSchema.dVariable, name, getToken(0).beginLine,false);
     }
    }
  }

  final public String init_declarator() throws ParseException {
  String name=empty;
    if (jj_2_20(3)) {
      name = declarator(ParserSchema.Variable);
    } else {
      ;
    }
    if (jj_2_21(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CLOSEPAREN:
          jj_consume_token(CLOSEPAREN);
          break;
        case OPENPAREN:
        case SCOPE:
        case AMPERSAND:
        case PLUS:
        case MINUS:
        case STAR:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case SIZEOF:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          expression();
          jj_consume_token(CLOSEPAREN);
          break;
        default:
          jj_la1[34] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENCURLY:
          jj_consume_token(OPENCURLY);
          skip_initializer();
          break;
        case OPENPAREN:
        case SCOPE:
        case AMPERSAND:
        case PLUS:
        case MINUS:
        case STAR:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case SIZEOF:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          expression();
          break;
        default:
          jj_la1[35] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String declarator(String objType) throws ParseException {
  String name,ptr;
    if (jj_2_22(2147483647)) {
      ptr = ptr_operator();
      name = declarator(objType);
                                                                                name = ptr + " " + name;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENSQUARE:
      case OPENPAREN:
      case SCOPE:
      case TILDE:
      case OPERATOR:
      case THIS:
      case ID:
        name = direct_declarator(objType);
        break;
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String direct_declarator(String objType) throws ParseException {
 String name = empty, params = null;
    if (jj_2_24(8)) {
      jj_consume_token(OPENPAREN);
      name = declarator(objType);
      jj_consume_token(CLOSEPAREN);
      if (jj_2_23(2)) {
        params = declarator_suffix();
      } else {
        ;
      }
      if (objType.equals("function"))
       {if (true) return "(" + name + ")";}
      if ((name.length() > 1) && (name.charAt(0) == '*') && (params != null))
       {if (true) return ("(*)" + params + " " + name.substring(1, name.length()));}
      {if (true) return name;}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCOPE:
      case TILDE:
      case OPERATOR:
      case THIS:
      case ID:
        name = id_expression();
        break;
      case OPENSQUARE:
      case OPENPAREN:
        name = declarator_suffix();
        break;
      default:
        jj_la1[38] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_8:
    while (true) {
      if (jj_2_25(2)) {
        ;
      } else {
        break label_8;
      }
      params = declarator_suffix();
                                             name += " " + params;
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String declarator_suffix() throws ParseException {
 String name = empty, next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENSQUARE:
      if (jj_2_26(2)) {
        jj_consume_token(OPENSQUARE);
        jj_consume_token(CLOSESQUARE);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENSQUARE:
          jj_consume_token(OPENSQUARE);
          next = constant_expression();
          jj_consume_token(CLOSESQUARE);
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                     name = "[" + next + "]";
      break;
    case OPENPAREN:
      if (jj_2_28(2)) {
        jj_consume_token(OPENPAREN);
        jj_consume_token(CLOSEPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENPAREN:
          jj_consume_token(OPENPAREN);
          if (jj_2_27(2147483647)) {
            next = parameter_list(true);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPENPAREN:
            case SCOPE:
            case AMPERSAND:
            case PLUS:
            case MINUS:
            case STAR:
            case PLUSPLUS:
            case MINUSMINUS:
            case TILDE:
            case NOT:
            case CONST_CAST:
            case DELETE:
            case DYNAMIC_CAST:
            case NEW:
            case OPERATOR:
            case REINTERPET_CAST:
            case SIZEOF:
            case STATIC_CAST:
            case THIS:
            case TYPEID:
            case OCTALINT:
            case OCTALLONG:
            case UNSIGNED_OCTALINT:
            case UNSIGNED_OCTALLONG:
            case DECIMALINT:
            case DECIMALLONG:
            case UNSIGNED_DECIMALINT:
            case UNSIGNED_DECIMALLONG:
            case HEXADECIMALINT:
            case HEXADECIMALLONG:
            case UNSIGNED_HEXADECIMALINT:
            case UNSIGNED_HEXADECIMALLONG:
            case FLOATONE:
            case FLOATTWO:
            case CHARACTER:
            case STRING:
            case ID:
              expression();
              break;
            default:
              jj_la1[40] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
          jj_consume_token(CLOSEPAREN);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
                                                                                                                           name = "(" + next + ")";
      break;
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_29(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[43] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    if (jj_2_30(2)) {
      exception_spec();
    } else {
      ;
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void simple_type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL:
    case CHAR:
    case DOUBLE:
    case FLOAT:
    case INT:
    case LONG:
    case SHORT:
    case SIGNED:
    case UNSIGNED:
    case VOID:
    case WCHAR_T:
      builtin_type_specifier();
      break;
    case SCOPE:
    case TILDE:
    case OPERATOR:
    case THIS:
    case ID:
      qualified_type(true);
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public String qualified_type(boolean addType) throws ParseException {
 String name = empty;
    name = id_expression();
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void type_qualifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CONST:
      jj_consume_token(CONST);
      break;
    case VOLATILE:
      jj_consume_token(VOLATILE);
      break;
    default:
      jj_la1[45] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void builtin_type_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VOID:
      jj_consume_token(VOID);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case SHORT:
      jj_consume_token(SHORT);
      break;
    case INT:
      jj_consume_token(INT);
      break;
    case LONG:
      jj_consume_token(LONG);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case DOUBLE:
      jj_consume_token(DOUBLE);
      break;
    case SIGNED:
      jj_consume_token(SIGNED);
      break;
    case UNSIGNED:
      jj_consume_token(UNSIGNED);
      break;
    case WCHAR_T:
      jj_consume_token(WCHAR_T);
      break;
    case BOOL:
      jj_consume_token(BOOL);
      break;
    default:
      jj_la1[46] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//When this lookahead is invoked, the "enum" keyword has already been matched.
  final public void enum_specifier_lookahead() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case ID:
      identifier();
      break;
    default:
      jj_la1[47] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      break;
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//The "enum" keyword has already been matched when we get here:
  final public String enum_specifier() throws ParseException {
  String name = empty; int startLine = getToken(1).beginLine;
    if (jj_2_31(2)) {
      name = identifier();
    } else {
                   name = UnnamedTypeManager.instance().getNextUnnamedType("enum");
    }
    DataElement theEnum = symtab.addObject(ParserSchema.dEnum,name,startLine,true);
    jj_consume_token(OPENCURLY);
    skip_object_body(theEnum);
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

//When this lookahead is invoked, the "class", "struct" or "union" keyword has already 
//been matched.
  final public void class_specifier_lookahead() throws ParseException {
    if (jj_2_32(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case ID:
      identifier();
      break;
    default:
      jj_la1[49] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_clause(null);
      break;
    default:
      jj_la1[50] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      break;
    default:
      jj_la1[51] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//The "class", "struct" or "union" keyword has already been matched when we get here.
//This method returns a bool indicating whether a class DataElement was created or not.
  final public String class_specifier() throws ParseException {
 String classType = empty; String name = empty; int startLine = getToken(1).beginLine;
   classType = getToken(0).image;
    if (jj_2_33(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case ID:
      name = identifier();
      break;
    default:
      jj_la1[52] = jj_gen;
      name = UnnamedTypeManager.instance().getNextUnnamedType(classType);
    }
   DataElement theClass = null;
   if (classType.equals(ParserSchema.Union))
    theClass = symtab.addObject(ParserSchema.dUnion, name, startLine, true);
   else if (classType.equals(ParserSchema.Struct))
    theClass = symtab.addObject(ParserSchema.dStruct, name, startLine, true);
   else
    theClass = symtab.addObject(ParserSchema.dClass, name, startLine, true);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
      base_clause(theClass);
      break;
    default:
      jj_la1[53] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
         symtab.closeScope(); {if (true) return name;}
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      skip_object_body(theClass);
      break;
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void base_clause(DataElement child) throws ParseException {
    jj_consume_token(COLON);
    base_specifier(child);
    label_9:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[55] = jj_gen;
        break label_9;
      }
      jj_consume_token(COMMA);
      base_specifier(child);
    }
  }

  final public void base_specifier(DataElement child) throws ParseException {
  String name; DataElement parent;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
    case PROTECTED:
    case PUBLIC:
    case VIRTUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRTUAL:
        jj_consume_token(VIRTUAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PRIVATE:
        case PROTECTED:
        case PUBLIC:
          access_specifier();
          break;
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
      case PRIVATE:
      case PROTECTED:
      case PUBLIC:
        access_specifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case VIRTUAL:
          jj_consume_token(VIRTUAL);
          break;
        default:
          jj_la1[57] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[58] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    if (jj_2_34(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    name = identifier();
    symtab.addClassBase(name);
  }

  final public void access_specifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    default:
      jj_la1[60] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void class_body() throws ParseException {
    jj_consume_token(OPENCURLY);
    if (jj_2_35(1)) {
      member_declaration_list();
    } else {
      ;
    }
    jj_consume_token(CLOSECURLY);
    symtab.closeScope();
  }

  final public void member_declaration_list() throws ParseException {
    label_10:
    while (true) {
      member_declaration();
      if (jj_2_36(1)) {
        ;
      } else {
        break label_10;
      }
    }
  }

  final public void member_declaration() throws ParseException {
 String theTypes = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PUBLIC:
      jj_consume_token(PUBLIC);
      jj_consume_token(COLON);
      break;
    case PRIVATE:
      jj_consume_token(PRIVATE);
      jj_consume_token(COLON);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      jj_consume_token(COLON);
      break;
    case USING:
      jj_consume_token(USING);
      using_declaration();
      break;
    case EXPORT:
      jj_consume_token(EXPORT);
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      template_declaration();
      break;
    case TEMPLATE:
      jj_consume_token(TEMPLATE);
      jj_consume_token(LESSTHAN);
      template_declaration();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[61] = jj_gen;
      if (jj_2_38(2147483647)) {
        function_definition("");
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case AUTO:
        case BOOL:
        case CHAR:
        case CLASS:
        case CONST:
        case DOUBLE:
        case ENUM:
        case EXPLICIT:
        case FLOAT:
        case FRIEND:
        case INLINE:
        case INT:
        case LONG:
        case MUTABLE:
        case OPERATOR:
        case REGISTER:
        case SHORT:
        case SIGNED:
        case STATIC:
        case STRUCT:
        case THIS:
        case TYPEDEF:
        case TYPENAME:
        case UNION:
        case UNSIGNED:
        case VIRTUAL:
        case VOID:
        case VOLATILE:
        case WCHAR_T:
        case ID:
          theTypes = declaration_specifiers();
     if (theTypes == null)
      {if (true) return;}
          if (jj_2_37(2147483647)) {
            function_definition(theTypes);
          } else {
            member_declarator_list(theTypes);
          }
          break;
        default:
          jj_la1[62] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

//The declaration_specifiers have already been matched when we get here
  final public void member_declarator_list(String theTypes) throws ParseException {
 String name = empty; int startLine = getToken(1).beginLine; boolean firstTime = true;
    if (jj_2_39(2)) {
      name = member_declarator();
    } else {
      ;
    }
    name = theTypes + " " + name;
    symtab.addObject(ParserSchema.dVariable, name, startLine,false);
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[63] = jj_gen;
        break label_11;
      }
      jj_consume_token(COMMA);
      if (firstTime)
      {
       theTypes = parseDeclaration(theTypes)[1];
       firstTime = false;
      }
      name = member_declarator();
      name = theTypes + " " + name;
      symtab.addObject(ParserSchema.dVariable, name,startLine,false);
    }
  }

  final public String member_declarator() throws ParseException {
 String name = empty;
    name = declarator(ParserSchema.Variable);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COLON:
    case ASSIGNEQUAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        if (jj_2_40(2)) {
          constant_expression();
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case DECIMALINT:
            jj_consume_token(DECIMALINT);
            break;
          default:
            jj_la1[64] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        break;
      case COLON:
        jj_consume_token(COLON);
        constant_expression();
        break;
      default:
        jj_la1[65] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void enum_body() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 0:
      jj_consume_token(0);
      break;
    case OPENCURLY:
      jj_consume_token(OPENCURLY);
      if (jj_2_41(2)) {
        enumerator_list();
      } else {
        ;
      }
      jj_consume_token(CLOSECURLY);
      break;
    default:
      jj_la1[67] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   symtab.closeScope();
  }

  final public void enumerator_list() throws ParseException {
    enumerator();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[68] = jj_gen;
        break label_12;
      }
      jj_consume_token(COMMA);
      enumerator();
    }
  }

  final public void enumerator() throws ParseException {
 String name = empty; int startLine = getToken(1).beginLine;
    identifier();
                name = getToken(0).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNEQUAL:
      jj_consume_token(ASSIGNEQUAL);
      constant_expression();
      break;
    default:
      jj_la1[69] = jj_gen;
      ;
    }
   symtab.addObject(ParserSchema.dVariable, name,startLine, false);
  }

  final public String ptr_operator() throws ParseException {
 String name = empty, next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
         {if (true) return "&";}
      break;
    case STAR:
      jj_consume_token(STAR);
         name = "*";
      break;
    case ID:
      name = nested_name_specifier();
      jj_consume_token(STAR);
                                        name += "*";
      break;
    default:
      jj_la1[70] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_42(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
        break;
      default:
        jj_la1[71] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                       next = getToken(0).image;
    } else {
      ;
    }
  {if (true) return name + next;}
    throw new Error("Missing return statement in function");
  }

  final public String cv_qualifier_seq() throws ParseException {
 String name = empty;
    if (jj_2_45(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CONST:
        jj_consume_token(CONST);
                             name = "const";
        if (jj_2_43(2)) {
          jj_consume_token(VOLATILE);
                                                                         name += " volatile";
        } else {
          ;
        }
        break;
      case VOLATILE:
        jj_consume_token(VOLATILE);
                                 name = "volatile";
        if (jj_2_44(2)) {
          jj_consume_token(CONST);
                                                                             name += " const";
        } else {
          ;
        }
        break;
      default:
        jj_la1[72] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

//The declaration_specifiers have already been matched when we get here:
  final public void constructor_destructor_definition(String name, String objectType) throws ParseException {
 String fullName = empty; int startLine = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case THIS:
    case ID:
      name = identifier();
      break;
    default:
      jj_la1[73] = jj_gen;
      ;
    }
    if (jj_2_46(2)) {
      jj_consume_token(OPENPAREN);
      jj_consume_token(CLOSEPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        fullName = parameter_list(true);
        jj_consume_token(CLOSEPAREN);
        break;
      default:
        jj_la1[74] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                                    fullName = name + "(" + fullName + ")";
    if (jj_2_47(2)) {
      exception_spec();
    } else {
      ;
    }
   DataElement theConstructor = null;
   if (objectType.equals(ParserSchema.Destructor))
    theConstructor = symtab.addObject(ParserSchema.dDestructor,fullName, startLine,true);
   else
    theConstructor = symtab.addObject(ParserSchema.dConstructor, fullName, startLine, true);
    if (jj_2_48(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
                        symtab.closeScope(); {if (true) return;}
        break;
      case COLON:
        ctor_initializer();
        break;
      default:
        jj_la1[75] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    jj_consume_token(OPENCURLY);
    skip_object_body(theConstructor);
  }

  final public void ctor_initializer() throws ParseException {
    jj_consume_token(COLON);
    mem_initializer();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[76] = jj_gen;
        break label_13;
      }
      jj_consume_token(COMMA);
      mem_initializer();
    }
  }

  final public void mem_initializer() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
      break;
    default:
      jj_la1[77] = jj_gen;
      ;
    }
    if (jj_2_49(2147483647)) {
      nested_name_specifier();
    } else {
      ;
    }
    identifier();
    if (jj_2_50(2)) {
      jj_consume_token(OPENPAREN);
      jj_consume_token(CLOSEPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        expression();
        jj_consume_token(CLOSEPAREN);
        break;
      default:
        jj_la1[78] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public String parameter_list(boolean addTypes) throws ParseException {
 String name = empty; String next = empty;
    name = parameter_declaration();
    if (jj_2_51(2)) {
      jj_consume_token(ELLIPSIS);
                                                      name += " ...";
    } else {
      ;
    }
    if (addTypes) symtab.addFunctionParameter(name);
    label_14:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[79] = jj_gen;
        break label_14;
      }
      jj_consume_token(COMMA);
      next = parameter_declaration();
                                        if (addTypes) symtab.addFunctionParameter(next); name += "," + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String parameter_declaration() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELLIPSIS:
      jj_consume_token(ELLIPSIS);
            {if (true) return "...";}
      break;
    case SCOPE:
    case AMPERSAND:
    case STAR:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      name = declaration_specifiers();
                                       if (name == null) {if (true) return empty;}
      if (jj_2_52(2)) {
        next = declarator(ParserSchema.Variable);
                                                                name += " " + next;
      } else {
        next = abstract_declarator();
                                       name += " " + next;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        next = assignment_expression();
                                           name += " = " + next;
        break;
      default:
        jj_la1[80] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[81] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return name.trim();}
    throw new Error("Missing return statement in function");
  }

  final public String initializer() throws ParseException {
 String name = empty; String next = empty;
    if (jj_2_54(3)) {
      jj_consume_token(OPENCURLY);
      name = initializer();
                             name = "{" + name;
      label_15:
      while (true) {
        if (jj_2_53(2)) {
          ;
        } else {
          break label_15;
        }
        jj_consume_token(COMMA);
        next = initializer();
                                            name += " , " + next;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        jj_consume_token(COMMA);
        break;
      default:
        jj_la1[82] = jj_gen;
        ;
      }
      jj_consume_token(CLOSECURLY);
        name += "}";
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        name = assignment_expression();
        break;
      default:
        jj_la1[83] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String abstract_declarator() throws ParseException {
 String name = empty; String next = empty;
    if (jj_2_58(2)) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        name = abstract_declarator();
        jj_consume_token(CLOSEPAREN);
                                              name = "(" + name + ")";
        label_16:
        while (true) {
          next = abstract_declarator_suffix();
                                                          name += next;
          if (jj_2_55(3)) {
            ;
          } else {
            break label_16;
          }
        }
        break;
      case OPENSQUARE:
        label_17:
        while (true) {
          if (jj_2_56(2)) {
            jj_consume_token(OPENSQUARE);
            jj_consume_token(CLOSESQUARE);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case OPENSQUARE:
              jj_consume_token(OPENSQUARE);
              next = constant_expression();
              jj_consume_token(CLOSESQUARE);
              break;
            default:
              jj_la1[84] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
                                                                                     name += "[" + next + "]";
          if (jj_2_57(2)) {
            ;
          } else {
            break label_17;
          }
        }
        break;
      case AMPERSAND:
      case STAR:
      case ID:
        name = ptr_operator();
        next = abstract_declarator();
                                                            name += " " + next;
        break;
      default:
        jj_la1[85] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String abstract_declarator_suffix() throws ParseException {
 String name = empty;
    if (jj_2_59(2)) {
      jj_consume_token(OPENSQUARE);
      jj_consume_token(CLOSESQUARE);
                           {if (true) return "[]";}
    } else if (jj_2_60(2)) {
      jj_consume_token(OPENPAREN);
      jj_consume_token(CLOSEPAREN);
                           {if (true) return "()";}
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENSQUARE:
        jj_consume_token(OPENSQUARE);
        name = constant_expression();
        jj_consume_token(CLOSESQUARE);
                                           {if (true) return "[" + name + "]";}
        break;
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        name = parameter_list(true);
        jj_consume_token(CLOSEPAREN);
        break;
      default:
        jj_la1[86] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return "(" + name + ")";}
    throw new Error("Missing return statement in function");
  }

  final public void template_head() throws ParseException {
    jj_consume_token(TEMPLATE);
    jj_consume_token(LESSTHAN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
    case ELLIPSIS:
    case AMPERSAND:
    case STAR:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      template_parameter_list();
      break;
    default:
      jj_la1[87] = jj_gen;
      ;
    }
    jj_consume_token(GREATERTHAN);
  }

//Fix this according to the C++ standard!!!
  final public void template_parameter_list() throws ParseException {
    template_parameter();
    label_18:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[88] = jj_gen;
        break label_18;
      }
      jj_consume_token(COMMA);
      template_parameter();
    }
  }

  final public void template_parameter() throws ParseException {
  Token t;
    if (jj_2_61(3)) {
      jj_consume_token(CLASS);
      t = jj_consume_token(ID);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCOPE:
      case ELLIPSIS:
      case AMPERSAND:
      case STAR:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXPLICIT:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case OPERATOR:
      case REGISTER:
      case SHORT:
      case SIGNED:
      case STATIC:
      case STRUCT:
      case THIS:
      case TYPEDEF:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case ID:
        parameter_declaration();
        break;
      default:
        jj_la1[89] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void template_argument_list() throws ParseException {
    template_argument();
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[90] = jj_gen;
        break label_19;
      }
      jj_consume_token(COMMA);
      template_argument();
    }
  }

  final public void template_argument() throws ParseException {
    if (jj_2_62(3)) {
      type_id();
    } else if (jj_2_63(3)) {
      id_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        assignment_expression();
        break;
      default:
        jj_la1[91] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public void statement_list() throws ParseException {
 boolean foundBreak = false;
    label_20:
    while (true) {
      foundBreak = statement();
                                           if (foundBreak) {if (true) return;}
      if (jj_2_64(2)) {
        ;
      } else {
        break label_20;
      }
    }
  }

  final public boolean statement() throws ParseException {
 String stmt, theTypes = empty; int startLine = getToken(1).beginLine; boolean foundBreakStatement = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DO:
    case FOR:
    case WHILE:
      iteration_statement();
      break;
    case BREAK:
    case CONTINUE:
    case GOTO:
    case RETURN:
      foundBreakStatement = jump_statement();
      break;
    case OPENCURLY:
      compound_statement();
      break;
    case IF:
    case SWITCH:
      selection_statement();
      break;
    case TRY:
      try_block();
      break;
    case THROW:
      throw_statement();
      break;
    case NAMESPACE:
      jj_consume_token(NAMESPACE);
      namespace_definition();
      break;
    case USING:
      jj_consume_token(USING);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAMESPACE:
        jj_consume_token(NAMESPACE);
        using_directive();
        break;
      case SCOPE:
      case TYPENAME:
      case ID:
        using_declaration();
        break;
      default:
        jj_la1[92] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case ASM:
      jj_consume_token(ASM);
      asm_definition();
      break;
    case SEMICOLON:
      jj_consume_token(SEMICOLON);
      break;
    default:
      jj_la1[93] = jj_gen;
      if (jj_2_65(2)) {
        labeled_statement();
      } else if (jj_2_66(2147483647)) {
        stmt = expression();
        jj_consume_token(SEMICOLON);
                                                         symtab.addObject(ParserSchema.dStatement, stmt + ";", startLine, false);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOPE:
        case AMPERSAND:
        case STAR:
        case AUTO:
        case BOOL:
        case CHAR:
        case CLASS:
        case CONST:
        case DOUBLE:
        case ENUM:
        case EXPLICIT:
        case FLOAT:
        case FRIEND:
        case INLINE:
        case INT:
        case LONG:
        case MUTABLE:
        case OPERATOR:
        case REGISTER:
        case SHORT:
        case SIGNED:
        case STATIC:
        case STRUCT:
        case THIS:
        case TYPEDEF:
        case TYPENAME:
        case UNION:
        case UNSIGNED:
        case VIRTUAL:
        case VOID:
        case VOLATILE:
        case WCHAR_T:
        case ID:
          theTypes = declaration_specifiers();
     if (theTypes == null)
      {if (true) return false;}
          simple_declaration(theTypes);
          jj_consume_token(SEMICOLON);
          break;
        default:
          jj_la1[94] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return foundBreakStatement;}
    throw new Error("Missing return statement in function");
  }

  final public void labeled_statement() throws ParseException {
 String name = empty; int startLine = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
          name = getToken(0).image;
      break;
    case CASE:
      jj_consume_token(CASE);
      name = constant_expression();
                                         name = "case " + name;
      break;
    case _DEFAULT:
      jj_consume_token(_DEFAULT);
               name = "default";
      break;
    default:
      jj_la1[95] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(COLON);
  symtab.addObject(ParserSchema.dCompoundStatement, name + " :",startLine,true);
    statement_list();
   symtab.closeScope();
  }

  final public void compound_statement() throws ParseException {
    jj_consume_token(OPENCURLY);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENCURLY:
    case OPENPAREN:
    case SCOPE:
    case SEMICOLON:
    case AMPERSAND:
    case PLUS:
    case MINUS:
    case STAR:
    case PLUSPLUS:
    case MINUSMINUS:
    case TILDE:
    case NOT:
    case ASM:
    case AUTO:
    case BREAK:
    case BOOL:
    case CASE:
    case CHAR:
    case CLASS:
    case CONST:
    case CONST_CAST:
    case CONTINUE:
    case _DEFAULT:
    case DELETE:
    case DO:
    case DOUBLE:
    case DYNAMIC_CAST:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FOR:
    case FRIEND:
    case GOTO:
    case IF:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case NAMESPACE:
    case NEW:
    case OPERATOR:
    case REGISTER:
    case REINTERPET_CAST:
    case RETURN:
    case SHORT:
    case SIGNED:
    case SIZEOF:
    case STATIC:
    case STATIC_CAST:
    case STRUCT:
    case SWITCH:
    case THIS:
    case THROW:
    case TRY:
    case TYPEDEF:
    case TYPEID:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case USING:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case WHILE:
    case OCTALINT:
    case OCTALLONG:
    case UNSIGNED_OCTALINT:
    case UNSIGNED_OCTALLONG:
    case DECIMALINT:
    case DECIMALLONG:
    case UNSIGNED_DECIMALINT:
    case UNSIGNED_DECIMALLONG:
    case HEXADECIMALINT:
    case HEXADECIMALLONG:
    case UNSIGNED_HEXADECIMALINT:
    case UNSIGNED_HEXADECIMALLONG:
    case FLOATONE:
    case FLOATTWO:
    case CHARACTER:
    case STRING:
    case ID:
      statement_list();
      break;
    default:
      jj_la1[96] = jj_gen;
      ;
    }
    jj_consume_token(CLOSECURLY);
  }

  final public void selection_statement() throws ParseException {
 String name = empty; String next = empty; int startLine = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IF:
      jj_consume_token(IF);
      jj_consume_token(OPENPAREN);
      name = expression();
      jj_consume_token(CLOSEPAREN);
                                     symtab.addObject(ParserSchema.dCompoundStatement, "if ( " + name + " )", startLine,true);
      statement();
                symtab.closeScope();
      if (jj_2_67(2147483647)) {
        jj_consume_token(ELSE);
             symtab.addObject(ParserSchema.dCompoundStatement, "else", getToken(0).beginLine,true);
        statement();
                 symtab.closeScope();
      } else {
        ;
      }
      break;
    case SWITCH:
      jj_consume_token(SWITCH);
      jj_consume_token(OPENPAREN);
      name = expression();
      jj_consume_token(CLOSEPAREN);
    symtab.addObject(ParserSchema.dCompoundStatement, "switch ( " + name + " )", startLine,true);
      statement();
                symtab.closeScope();
      break;
    default:
      jj_la1[97] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void iteration_statement() throws ParseException {
 String name = empty; String next = empty; int startLine = getToken(1).beginLine; DataElement theObject;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      jj_consume_token(WHILE);
      jj_consume_token(OPENPAREN);
      name = expression();
      jj_consume_token(CLOSEPAREN);
    symtab.addObject(ParserSchema.dCompoundStatement, "while (" + name + ")", startLine,true);
      statement();
      break;
    case DO:
      jj_consume_token(DO);
    theObject = symtab.addObject(ParserSchema.dCompoundStatement, "do", startLine,true);
      statement();
      jj_consume_token(WHILE);
      jj_consume_token(OPENPAREN);
      name = expression();
      jj_consume_token(CLOSEPAREN);
      jj_consume_token(SEMICOLON);
    if (name == null) name = empty; theObject.setAttribute(DE.A_NAME, "do...while (" + name + ")");
      break;
    case FOR:
      jj_consume_token(FOR);
      jj_consume_token(OPENPAREN);
              Token currentToken = getToken(1); name = "for(";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SEMICOLON:
        jj_consume_token(SEMICOLON);
             name += ";";
        break;
      default:
        jj_la1[98] = jj_gen;
        if (jj_2_68(2147483647)) {
          next = expression();
          jj_consume_token(SEMICOLON);
                                                             name = "for (" + next + ";";
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case SCOPE:
          case AMPERSAND:
          case STAR:
          case AUTO:
          case BOOL:
          case CHAR:
          case CLASS:
          case CONST:
          case DOUBLE:
          case ENUM:
          case EXPLICIT:
          case FLOAT:
          case FRIEND:
          case INLINE:
          case INT:
          case LONG:
          case MUTABLE:
          case OPERATOR:
          case REGISTER:
          case SHORT:
          case SIGNED:
          case STATIC:
          case STRUCT:
          case THIS:
          case TYPEDEF:
          case TYPENAME:
          case UNION:
          case UNSIGNED:
          case VIRTUAL:
          case VOID:
          case VOLATILE:
          case WCHAR_T:
          case ID:
            declaration_specifiers();
            simple_declaration(null);
            jj_consume_token(SEMICOLON);
         while (( currentToken != null) && (currentToken != getToken(0)))
         {
          name += currentToken.image + " ";
          currentToken = currentToken.next;
         }
         name += currentToken.image;
            break;
          default:
            jj_la1[99] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      if (jj_2_69(2147483647)) {
        next = expression();
                                                              name += " " + next;
      } else {
        ;
      }
      jj_consume_token(SEMICOLON);
           name += ";";
      if (jj_2_70(2147483647)) {
        next = expression();
                                                             name += " " + next;
      } else {
        ;
      }
      jj_consume_token(CLOSEPAREN);
     name += ")";
     symtab.addObject(ParserSchema.dCompoundStatement, name, startLine,true);
      statement();
      break;
    default:
      jj_la1[100] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  symtab.closeScope();
  }

  final public boolean jump_statement() throws ParseException {
 String theText = empty; int theLineNumber = getToken(1).beginLine;
 boolean breakFound = false;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GOTO:
      jj_consume_token(GOTO);
      jj_consume_token(ID);
                             theText = "goto " + getToken(0).image + ";";
      break;
    case CONTINUE:
      jj_consume_token(CONTINUE);
                              theText = "continue;";
      break;
    case BREAK:
      jj_consume_token(BREAK);
                              theText = "break;"; breakFound = true;
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        theText = expression();
        break;
      default:
        jj_la1[101] = jj_gen;
        ;
      }
                                        theText = "return " + theText + ";";
      break;
    default:
      jj_la1[102] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(SEMICOLON);
  symtab.addObject(ParserSchema.dStatement, theText, theLineNumber,false);
  {if (true) return breakFound;}
    throw new Error("Missing return statement in function");
  }

  final public void try_block() throws ParseException {
    jj_consume_token(TRY);
    symtab.addObject(ParserSchema.dCompoundStatement, "try", getToken(0).beginLine, true);
    compound_statement();
    symtab.closeScope();
    label_21:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CATCH:
      case FINALLY:
        ;
        break;
      default:
        jj_la1[103] = jj_gen;
        break label_21;
      }
      handler();
    }
  }

  final public void handler() throws ParseException {
 String name = null; int startLine = getToken(1).beginLine;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CATCH:
      jj_consume_token(CATCH);
      jj_consume_token(OPENPAREN);
      name = exception_declaration();
      jj_consume_token(CLOSEPAREN);
                                                     name = "catch (" + name + ")";
      break;
    case FINALLY:
      jj_consume_token(FINALLY);
                name = "finally";
      break;
    default:
      jj_la1[104] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  symtab.addObject(ParserSchema.dCompoundStatement, name, startLine, true);
    compound_statement();
   symtab.closeScope();
  }

  final public String exception_declaration() throws ParseException {
 String name = empty;
    if (jj_2_71(2147483647)) {
      name = parameter_list(false);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SCOPE:
      case SEMICOLON:
      case AMPERSAND:
      case STAR:
      case ASM:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case DOUBLE:
      case ENUM:
      case EXPLICIT:
      case EXPORT:
      case EXTERN:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NAMESPACE:
      case OPERATOR:
      case REGISTER:
      case SHORT:
      case SIGNED:
      case STATIC:
      case STRUCT:
      case TEMPLATE:
      case THIS:
      case TYPEDEF:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case USING:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case ID:
        declaration();
        break;
      default:
        jj_la1[105] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void throw_statement() throws ParseException {
 String theText = empty; int startLine = getToken(1).beginLine;
    jj_consume_token(THROW);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
    case SCOPE:
    case AMPERSAND:
    case PLUS:
    case MINUS:
    case STAR:
    case PLUSPLUS:
    case MINUSMINUS:
    case TILDE:
    case NOT:
    case CONST_CAST:
    case DELETE:
    case DYNAMIC_CAST:
    case NEW:
    case OPERATOR:
    case REINTERPET_CAST:
    case SIZEOF:
    case STATIC_CAST:
    case THIS:
    case TYPEID:
    case OCTALINT:
    case OCTALLONG:
    case UNSIGNED_OCTALINT:
    case UNSIGNED_OCTALLONG:
    case DECIMALINT:
    case DECIMALLONG:
    case UNSIGNED_DECIMALINT:
    case UNSIGNED_DECIMALLONG:
    case HEXADECIMALINT:
    case HEXADECIMALLONG:
    case UNSIGNED_HEXADECIMALINT:
    case UNSIGNED_HEXADECIMALLONG:
    case FLOATONE:
    case FLOATTWO:
    case CHARACTER:
    case STRING:
    case ID:
      theText = assignment_expression();
      break;
    default:
      jj_la1[106] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    theText = "throw " + theText + ";";
    symtab.addObject(ParserSchema.dStatement, theText, startLine, false);
  }

  final public void expression_lookahead() throws ParseException {
    if (jj_2_72(2)) {
      constant();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        expression();
        break;
      default:
        jj_la1[107] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  final public String expression() throws ParseException {
 String name = empty; String next = empty;
    name = assignment_expression();
    label_22:
    while (true) {
      if (jj_2_73(2)) {
        ;
      } else {
        break label_22;
      }
      jj_consume_token(COMMA);
      next = assignment_expression();
                                                    name += " , " + next;
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String assignment_expression() throws ParseException {
 String name = empty; String next = empty; String op = empty;
    name = conditional_expression();
    label_23:
    while (true) {
      if (jj_2_74(2)) {
        ;
      } else {
        break label_23;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ASSIGNEQUAL:
        jj_consume_token(ASSIGNEQUAL);
        break;
      case TIMESEQUAL:
        jj_consume_token(TIMESEQUAL);
        break;
      case DIVIDEEQUAL:
        jj_consume_token(DIVIDEEQUAL);
        break;
      case MODEQUAL:
        jj_consume_token(MODEQUAL);
        break;
      case PLUSEQUAL:
        jj_consume_token(PLUSEQUAL);
        break;
      case MINUSEQUAL:
        jj_consume_token(MINUSEQUAL);
        break;
      case SHIFTLEFTEQUAL:
        jj_consume_token(SHIFTLEFTEQUAL);
        break;
      case SHIFTRIGHTEQUAL:
        jj_consume_token(SHIFTRIGHTEQUAL);
        break;
      case BITWISEANDEQUAL:
        jj_consume_token(BITWISEANDEQUAL);
        break;
      case BITWISEXOREQUAL:
        jj_consume_token(BITWISEXOREQUAL);
        break;
      case BITWISEOREQUAL:
        jj_consume_token(BITWISEOREQUAL);
        break;
      default:
        jj_la1[108] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                                    op = " " + getToken(0).image + " ";
      next = assignment_expression();
                                    name += op + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String conditional_expression() throws ParseException {
 String name = empty; String next = empty;
    name = logical_or_expression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case QUESTIONMARK:
      jj_consume_token(QUESTIONMARK);
      next = expression();
                              name += " ? " + next;
      jj_consume_token(COLON);
      next = assignment_expression();
                                         name += " : " + next;
      break;
    default:
      jj_la1[109] = jj_gen;
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String constant_expression() throws ParseException {
 String name = empty;
    if (jj_2_75(3)) {
      name = conditional_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
        name = constant();
        break;
      default:
        jj_la1[110] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String logical_or_expression() throws ParseException {
 String name = empty; String next = empty;
    name = logical_and_expression();
    label_24:
    while (true) {
      if (jj_2_76(2)) {
        ;
      } else {
        break label_24;
      }
      jj_consume_token(OR);
      next = logical_and_expression();
                                                                                       name += " || " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String logical_and_expression() throws ParseException {
 String name = empty; String next = empty;
    name = inclusive_or_expression();
    label_25:
    while (true) {
      if (jj_2_77(2)) {
        ;
      } else {
        break label_25;
      }
      jj_consume_token(AND);
      next = inclusive_or_expression();
                                                                                         name += " && " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String inclusive_or_expression() throws ParseException {
 String name = empty; String next = empty;
    name = exclusive_or_expression();
    label_26:
    while (true) {
      if (jj_2_78(2)) {
        ;
      } else {
        break label_26;
      }
      jj_consume_token(BITWISEOR);
      next = exclusive_or_expression();
                                                                                        name += " | " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String exclusive_or_expression() throws ParseException {
 String name = empty; String next = empty;
    name = and_expression();
    label_27:
    while (true) {
      if (jj_2_79(2)) {
        ;
      } else {
        break label_27;
      }
      jj_consume_token(BITWISEXOR);
      next = and_expression();
                                                                      name += " ^ " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String and_expression() throws ParseException {
 String name = empty; String next = empty;
    name = equality_expression();
    label_28:
    while (true) {
      if (jj_2_80(2)) {
        ;
      } else {
        break label_28;
      }
      jj_consume_token(AMPERSAND);
      next = equality_expression();
                                                                                name += " & " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String equality_expression() throws ParseException {
 String name = empty; String next = empty;
    name = relational_expression();
    label_29:
    while (true) {
      if (jj_2_81(2)) {
        ;
      } else {
        break label_29;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NOTEQUAL:
        jj_consume_token(NOTEQUAL);
        break;
      case EQUAL:
        jj_consume_token(EQUAL);
        break;
      default:
        jj_la1[111] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                name += " " + getToken(0).image;
      next = relational_expression();
                                                                    name += " " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String relational_expression() throws ParseException {
 String name = empty; String next = empty;
    name = shift_expression();
    label_30:
    while (true) {
      if (jj_2_82(2)) {
        ;
      } else {
        break label_30;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LESSTHAN:
        jj_consume_token(LESSTHAN);
        break;
      case GREATERTHAN:
        jj_consume_token(GREATERTHAN);
        break;
      case LESSTHANOREQ:
        jj_consume_token(LESSTHANOREQ);
        break;
      case GREATERTHANOREQ:
        jj_consume_token(GREATERTHANOREQ);
        break;
      default:
        jj_la1[112] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                                       name += " " + getToken(0).image;
      next = shift_expression();
                                                          name += " " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String shift_expression() throws ParseException {
 String name = empty; String next = empty;
    name = additive_expression();
    label_31:
    while (true) {
      if (jj_2_83(2)) {
        ;
      } else {
        break label_31;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SHIFTLEFT:
        jj_consume_token(SHIFTLEFT);
        break;
      case SHIFTRIGHT:
        jj_consume_token(SHIFTRIGHT);
        break;
      default:
        jj_la1[113] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                              name += " " + getToken(0).image;
      next = additive_expression();
                                                                name += " " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String additive_expression() throws ParseException {
 String name = empty; String next = empty;
    name = multiplicative_expression();
    label_32:
    while (true) {
      if (jj_2_84(2)) {
        ;
      } else {
        break label_32;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        break;
      case MINUS:
        jj_consume_token(MINUS);
        break;
      default:
        jj_la1[114] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                               name += " " + getToken(0).image;
      next = multiplicative_expression();
                                        name += " " + next;
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String multiplicative_expression() throws ParseException {
 String name = empty; String next = empty;
    name = pm_expression();
    label_33:
    while (true) {
      if (jj_2_85(2)) {
        ;
      } else {
        break label_33;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case STAR:
        jj_consume_token(STAR);
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        break;
      case MOD:
        jj_consume_token(MOD);
        break;
      default:
        jj_la1[115] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                    name += " " + getToken(0).image;
      next = pm_expression();
                             name += " " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String pm_expression() throws ParseException {
 String name = empty; String next = empty;
    name = cast_expression();
    label_34:
    while (true) {
      if (jj_2_86(2)) {
        ;
      } else {
        break label_34;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DOTSTAR:
        jj_consume_token(DOTSTAR);
        break;
      case ARROWSTAR:
        jj_consume_token(ARROWSTAR);
        break;
      default:
        jj_la1[116] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                                                            name += " " + getToken(0).image;
      next = cast_expression();
                                                       name += " " + next;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String cast_expression() throws ParseException {
 String name = empty; String next = empty;
    if (jj_2_87(2147483647)) {
      jj_consume_token(OPENPAREN);
      name = type_id();
      jj_consume_token(CLOSEPAREN);
      next = cast_expression();
                                                                 name = "(" + name + ")" + next;
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        name = unary_expression();
        break;
      default:
        jj_la1[117] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String unary_expression() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PLUSPLUS:
      jj_consume_token(PLUSPLUS);
      name = unary_expression();
                                   name = "++" + name;
      break;
    case MINUSMINUS:
      jj_consume_token(MINUSMINUS);
      name = unary_expression();
                                   name = "--" + name;
      break;
    case SIZEOF:
      jj_consume_token(SIZEOF);
      if (jj_2_88(2147483647)) {
        jj_consume_token(OPENPAREN);
        name = type_id();
        jj_consume_token(CLOSEPAREN);
                                                                        name = "sizeof " + "(" + name + ")";
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENPAREN:
        case SCOPE:
        case AMPERSAND:
        case PLUS:
        case MINUS:
        case STAR:
        case PLUSPLUS:
        case MINUSMINUS:
        case TILDE:
        case NOT:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case SIZEOF:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          name = unary_expression();
          break;
        default:
          jj_la1[118] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      break;
    default:
      jj_la1[119] = jj_gen;
      if (jj_2_89(3)) {
        name = unary_operator();
        next = cast_expression();
                                                                  name += next;
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case OPENPAREN:
        case SCOPE:
        case TILDE:
        case CONST_CAST:
        case DELETE:
        case DYNAMIC_CAST:
        case NEW:
        case OPERATOR:
        case REINTERPET_CAST:
        case STATIC_CAST:
        case THIS:
        case TYPEID:
        case OCTALINT:
        case OCTALLONG:
        case UNSIGNED_OCTALINT:
        case UNSIGNED_OCTALLONG:
        case DECIMALINT:
        case DECIMALLONG:
        case UNSIGNED_DECIMALINT:
        case UNSIGNED_DECIMALLONG:
        case HEXADECIMALINT:
        case HEXADECIMALLONG:
        case UNSIGNED_HEXADECIMALINT:
        case UNSIGNED_HEXADECIMALLONG:
        case FLOATONE:
        case FLOATTWO:
        case CHARACTER:
        case STRING:
        case ID:
          name = postfix_expression();
          break;
        default:
          jj_la1[120] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String postfix_expression() throws ParseException {
 String name = empty; String next = empty; String functionName = empty;
    if (jj_2_91(3)) {
      name = primary_expression();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DYNAMIC_CAST:
        jj_consume_token(DYNAMIC_CAST);
        jj_consume_token(LESSTHAN);
        name = type_id();
        jj_consume_token(GREATERTHAN);
                                                   name = "dynamic_cast<" + name + ">";
        break;
      case STATIC_CAST:
        jj_consume_token(STATIC_CAST);
        jj_consume_token(LESSTHAN);
        name = type_id();
        jj_consume_token(GREATERTHAN);
                                                   name = "static_cast<" + name + ">";
        break;
      case REINTERPET_CAST:
        jj_consume_token(REINTERPET_CAST);
        jj_consume_token(LESSTHAN);
        name = type_id();
        jj_consume_token(GREATERTHAN);
                                                   name = "reinterpret_cast<" + name + ">";
        break;
      case CONST_CAST:
        jj_consume_token(CONST_CAST);
        jj_consume_token(LESSTHAN);
        name = type_id();
        jj_consume_token(GREATERTHAN);
                                                   name = "const_cast<" + name + ">";
        break;
      case TYPEID:
        jj_consume_token(TYPEID);
                name = "typeid";
        if (jj_2_90(2147483647)) {
          jj_consume_token(OPENPAREN);
          next = type_id();
          jj_consume_token(CLOSEPAREN);
                                                                                          name += "(" + next + ")";
        } else {
          ;
        }
        break;
      default:
        jj_la1[121] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_35:
    while (true) {
      if (jj_2_92(2)) {
        ;
      } else {
        break label_35;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENSQUARE:
        jj_consume_token(OPENSQUARE);
        next = expression();
        jj_consume_token(CLOSESQUARE);
                                              name += "[" + next + "]";
        break;
      case OPENPAREN:
        functionName = getToken(0).image;
        if (jj_2_93(2)) {
          jj_consume_token(OPENPAREN);
          jj_consume_token(CLOSEPAREN);
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case OPENPAREN:
            jj_consume_token(OPENPAREN);
            next = expression();
            jj_consume_token(CLOSEPAREN);
            break;
          default:
            jj_la1[122] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
        name += "(" + next + ")"; symtab.addFunctionCall(functionName, next);
        break;
      case DOT:
        jj_consume_token(DOT);
        next = id_expression();
                                          name += "." + next;
        break;
      case POINTERTO:
        jj_consume_token(POINTERTO);
        next = id_expression();
                                          name += "->" + next;
        break;
      case PLUSPLUS:
        jj_consume_token(PLUSPLUS);
                                              name += "++";
        break;
      case MINUSMINUS:
        jj_consume_token(MINUSMINUS);
                                              name += "--";
        break;
      default:
        jj_la1[123] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String primary_expression() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
    case OCTALLONG:
    case UNSIGNED_OCTALINT:
    case UNSIGNED_OCTALLONG:
    case DECIMALINT:
    case DECIMALLONG:
    case UNSIGNED_DECIMALINT:
    case UNSIGNED_DECIMALLONG:
    case HEXADECIMALINT:
    case HEXADECIMALLONG:
    case UNSIGNED_HEXADECIMALINT:
    case UNSIGNED_HEXADECIMALLONG:
    case FLOATONE:
    case FLOATTWO:
    case CHARACTER:
      name = constant();
      break;
    case STRING:
      jj_consume_token(STRING);
              name = getToken(0).image;
      label_36:
      while (true) {
        if (jj_2_94(2)) {
          ;
        } else {
          break label_36;
        }
        jj_consume_token(STRING);
                                                                 name += getToken(0).image + " ";
      }
      break;
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      name = expression();
      jj_consume_token(CLOSEPAREN);
                                  name = "(" + name + ")";
      break;
    default:
      jj_la1[124] = jj_gen;
      if (jj_2_95(2147483647)) {
        name = new_expression();
      } else if (jj_2_96(2147483647)) {
        name = delete_expression();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case SCOPE:
        case TILDE:
        case OPERATOR:
        case THIS:
        case ID:
          name = id_expression();
          break;
        default:
          jj_la1[125] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String new_expression() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
          name = "::";
      break;
    default:
      jj_la1[126] = jj_gen;
      ;
    }
    jj_consume_token(NEW);
          name += "new";
    if (jj_2_97(2147483647)) {
      jj_consume_token(OPENPAREN);
      next = expression();
      jj_consume_token(CLOSEPAREN);
                                                                       name += " " + next;
    } else {
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENPAREN:
      jj_consume_token(OPENPAREN);
      next = declaration_specifier();
      jj_consume_token(CLOSEPAREN);
                                               name += "(" + next + ")";
      break;
    case SCOPE:
    case AMPERSAND:
    case STAR:
    case AUTO:
    case BOOL:
    case CHAR:
    case CLASS:
    case CONST:
    case DOUBLE:
    case ENUM:
    case EXPLICIT:
    case FLOAT:
    case FRIEND:
    case INLINE:
    case INT:
    case LONG:
    case MUTABLE:
    case OPERATOR:
    case REGISTER:
    case SHORT:
    case SIGNED:
    case STATIC:
    case STRUCT:
    case THIS:
    case TYPEDEF:
    case TYPENAME:
    case UNION:
    case UNSIGNED:
    case VIRTUAL:
    case VOID:
    case VOLATILE:
    case WCHAR_T:
    case ID:
      next = new_type_id();
                             name += " " + next;
      break;
    default:
      jj_la1[127] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_98(2)) {
      jj_consume_token(OPENPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CLOSEPAREN:
        jj_consume_token(CLOSEPAREN);
                             name += "()";
        break;
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case CONST_CAST:
      case DELETE:
      case DYNAMIC_CAST:
      case NEW:
      case OPERATOR:
      case REINTERPET_CAST:
      case SIZEOF:
      case STATIC_CAST:
      case THIS:
      case TYPEID:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        next = expression();
        jj_consume_token(CLOSEPAREN);
                                                                       name += "(" + next + ")";
        break;
      default:
        jj_la1[128] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } else {
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String new_type_id() throws ParseException {
 String name = empty; String next = empty;
    label_37:
    while (true) {
      next = declaration_specifier();
                                                name += " " + next;
      if (jj_2_99(2)) {
        ;
      } else {
        break label_37;
      }
    }
    if (jj_2_100(2)) {
      next = new_declarator();
                                          name += " " + next;
    } else {
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String new_declarator() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENSQUARE:
      name = direct_new_declarator();
      break;
    case AMPERSAND:
    case STAR:
    case ID:
      name = ptr_operator();
                           name += next;
      if (jj_2_101(2)) {
        next = new_declarator();
                                            name += " " + next;
      } else {
        ;
      }
      break;
    default:
      jj_la1[129] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String direct_new_declarator() throws ParseException {
 String name = empty; String next = empty;
    label_38:
    while (true) {
      jj_consume_token(OPENSQUARE);
      next = expression();
      jj_consume_token(CLOSESQUARE);
                                              name += "[" + next + "]";
      if (jj_2_102(2)) {
        ;
      } else {
        break label_38;
      }
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String new_initializer() throws ParseException {
 String name = empty;
    if (jj_2_103(2)) {
      jj_consume_token(OPENPAREN);
      jj_consume_token(CLOSEPAREN);
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
        jj_consume_token(OPENPAREN);
        name = expression();
        jj_consume_token(CLOSEPAREN);
        break;
      default:
        jj_la1[130] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
                                                          name = "(" + name + ")";
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String delete_expression() throws ParseException {
 String name = empty; String next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
         name = "::";
      break;
    default:
      jj_la1[131] = jj_gen;
      ;
    }
    jj_consume_token(DELETE);
            name += "delete";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPENSQUARE:
      jj_consume_token(OPENSQUARE);
      jj_consume_token(CLOSESQUARE);
             name += "[]";
      break;
    default:
      jj_la1[132] = jj_gen;
      ;
    }
    next = cast_expression();
                            name += " " + next;
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String unary_operator() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AMPERSAND:
      jj_consume_token(AMPERSAND);
      break;
    case STAR:
      jj_consume_token(STAR);
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    case TILDE:
      jj_consume_token(TILDE);
      break;
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[133] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

  final public String unqualified_id() throws ParseException {
 String name = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case TILDE:
      jj_consume_token(TILDE);
      name = identifier();
                                 name = "~" + name;
      break;
    case OPERATOR:
      jj_consume_token(OPERATOR);
      name = optor();
                                 name = "operator" + name;
      break;
    default:
      jj_la1[134] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String qualified_id() throws ParseException {
 String name = empty, next = empty;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
      jj_consume_token(SCOPE);
          name = "::";
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPERATOR:
        jj_consume_token(OPERATOR);
        next = optor();
                                           name += "operator" + next;
        break;
      default:
        jj_la1[136] = jj_gen;
        if (jj_2_104(2147483647)) {
          next = nested_name_specifier();
                                                                          name += next;
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case TEMPLATE:
            jj_consume_token(TEMPLATE);
                                                       name += "template";
            break;
          default:
            jj_la1[135] = jj_gen;
            ;
          }
          next = unqualified_id();
                                                                   name += " " + next;
        } else {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case THIS:
          case ID:
            next = identifier();
                                           name += next;
            break;
          default:
            jj_la1[137] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
        }
      }
      break;
    default:
      jj_la1[140] = jj_gen;
      if (jj_2_105(2147483647)) {
        name = nested_name_specifier();
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TEMPLATE:
          jj_consume_token(TEMPLATE);
                                                     name += "template";
          break;
        default:
          jj_la1[138] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case TILDE:
        case OPERATOR:
          next = unqualified_id();
                                                                    name += " " + next;
          break;
        case THIS:
        case ID:
          next = identifier();
                                                                    name += " " + next;
          break;
        default:
          jj_la1[139] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case THIS:
        case ID:
          name = identifier();
          break;
        default:
          jj_la1[141] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String id_expression() throws ParseException {
 String name;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SCOPE:
    case THIS:
    case ID:
      name = qualified_id();
      break;
    case TILDE:
    case OPERATOR:
      name = unqualified_id();
      break;
    default:
      jj_la1[142] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String identifier() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ID:
      jj_consume_token(ID);
      break;
    case THIS:
      jj_consume_token(THIS);
      break;
    default:
      jj_la1[143] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    String name = getToken(0).image;
    symtab.addObjectUse(name);
    if (jj_2_106(2147483647)) {
      jj_consume_token(LESSTHAN);
      template_argument_list();
      jj_consume_token(GREATERTHAN);
    } else {
      ;
    }
    {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String type_id() throws ParseException {
 String name = empty, next = empty;
    label_39:
    while (true) {
      next = declaration_specifier();
                                               name += " " + next;
      if (jj_2_107(2)) {
        ;
      } else {
        break label_39;
      }
    }
    next = abstract_declarator();
                               name += next;
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void nested_name_lookahead() throws ParseException {
    identifier();
    jj_consume_token(SCOPE);
  }

  final public String nested_name_specifier() throws ParseException {
 String name = empty, next;
    jj_consume_token(ID);
        name = getToken(0).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LESSTHAN:
      jj_consume_token(LESSTHAN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OPENPAREN:
      case SCOPE:
      case AMPERSAND:
      case PLUS:
      case MINUS:
      case STAR:
      case PLUSPLUS:
      case MINUSMINUS:
      case TILDE:
      case NOT:
      case AUTO:
      case BOOL:
      case CHAR:
      case CLASS:
      case CONST:
      case CONST_CAST:
      case DELETE:
      case DOUBLE:
      case DYNAMIC_CAST:
      case ENUM:
      case EXPLICIT:
      case FLOAT:
      case FRIEND:
      case INLINE:
      case INT:
      case LONG:
      case MUTABLE:
      case NEW:
      case OPERATOR:
      case REGISTER:
      case REINTERPET_CAST:
      case SHORT:
      case SIGNED:
      case SIZEOF:
      case STATIC:
      case STATIC_CAST:
      case STRUCT:
      case THIS:
      case TYPEDEF:
      case TYPEID:
      case TYPENAME:
      case UNION:
      case UNSIGNED:
      case VIRTUAL:
      case VOID:
      case VOLATILE:
      case WCHAR_T:
      case OCTALINT:
      case OCTALLONG:
      case UNSIGNED_OCTALINT:
      case UNSIGNED_OCTALLONG:
      case DECIMALINT:
      case DECIMALLONG:
      case UNSIGNED_DECIMALINT:
      case UNSIGNED_DECIMALLONG:
      case HEXADECIMALINT:
      case HEXADECIMALLONG:
      case UNSIGNED_HEXADECIMALINT:
      case UNSIGNED_HEXADECIMALLONG:
      case FLOATONE:
      case FLOATTWO:
      case CHARACTER:
      case STRING:
      case ID:
        template_argument_list();
        break;
      default:
        jj_la1[144] = jj_gen;
        ;
      }
      jj_consume_token(GREATERTHAN);
      break;
    default:
      jj_la1[145] = jj_gen;
      ;
    }
    jj_consume_token(SCOPE);
        name += "::";
    if (jj_2_108(2)) {
      jj_consume_token(TEMPLATE);
                            name += "template";
    } else {
      ;
    }
    if (jj_2_109(2147483647)) {
      next = nested_name_specifier();
                                                                      name += next;
    } else {
      ;
    }
   {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public String constant() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OCTALINT:
      jj_consume_token(OCTALINT);
      break;
    case OCTALLONG:
      jj_consume_token(OCTALLONG);
      break;
    case DECIMALINT:
      jj_consume_token(DECIMALINT);
      break;
    case DECIMALLONG:
      jj_consume_token(DECIMALLONG);
      break;
    case HEXADECIMALINT:
      jj_consume_token(HEXADECIMALINT);
      break;
    case HEXADECIMALLONG:
      jj_consume_token(HEXADECIMALLONG);
      break;
    case UNSIGNED_OCTALINT:
      jj_consume_token(UNSIGNED_OCTALINT);
      break;
    case UNSIGNED_OCTALLONG:
      jj_consume_token(UNSIGNED_OCTALLONG);
      break;
    case UNSIGNED_DECIMALINT:
      jj_consume_token(UNSIGNED_DECIMALINT);
      break;
    case UNSIGNED_DECIMALLONG:
      jj_consume_token(UNSIGNED_DECIMALLONG);
      break;
    case UNSIGNED_HEXADECIMALINT:
      jj_consume_token(UNSIGNED_HEXADECIMALINT);
      break;
    case UNSIGNED_HEXADECIMALLONG:
      jj_consume_token(UNSIGNED_HEXADECIMALLONG);
      break;
    case CHARACTER:
      jj_consume_token(CHARACTER);
      break;
    case FLOATONE:
      jj_consume_token(FLOATONE);
      break;
    case FLOATTWO:
      jj_consume_token(FLOATTWO);
      break;
    default:
      jj_la1[146] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  {if (true) return getToken(0).image;}
    throw new Error("Missing return statement in function");
  }

  final public String optor() throws ParseException {
 String name = getToken(1).image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEW:
      jj_consume_token(NEW);
      if (jj_2_110(2)) {
        jj_consume_token(OPENSQUARE);
        jj_consume_token(CLOSESQUARE);
                                    name += "[]";
      } else {
        ;
      }
      break;
    case DELETE:
      jj_consume_token(DELETE);
      if (jj_2_111(2)) {
        jj_consume_token(OPENSQUARE);
        jj_consume_token(CLOSESQUARE);
                                    name += "[]";
      } else {
        ;
      }
      break;
    case PLUS:
      jj_consume_token(PLUS);
      break;
    case MINUS:
      jj_consume_token(MINUS);
      break;
    default:
      jj_la1[148] = jj_gen;
      if (jj_2_113(2)) {
        jj_consume_token(STAR);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIVIDE:
          jj_consume_token(DIVIDE);
          break;
        case MOD:
          jj_consume_token(MOD);
          break;
        case BITWISEXOR:
          jj_consume_token(BITWISEXOR);
          break;
        default:
          jj_la1[149] = jj_gen;
          if (jj_2_114(2)) {
            jj_consume_token(AMPERSAND);
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case BITWISEOR:
              jj_consume_token(BITWISEOR);
              break;
            default:
              jj_la1[150] = jj_gen;
              if (jj_2_115(2)) {
                jj_consume_token(TILDE);
              } else {
                switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                case NOT:
                  jj_consume_token(NOT);
                  break;
                case ASSIGNEQUAL:
                  jj_consume_token(ASSIGNEQUAL);
                  break;
                case LESSTHAN:
                  jj_consume_token(LESSTHAN);
                  break;
                case GREATERTHAN:
                  jj_consume_token(GREATERTHAN);
                  break;
                case PLUSEQUAL:
                  jj_consume_token(PLUSEQUAL);
                  break;
                case MINUSEQUAL:
                  jj_consume_token(MINUSEQUAL);
                  break;
                case TIMESEQUAL:
                  jj_consume_token(TIMESEQUAL);
                  break;
                case DIVIDEEQUAL:
                  jj_consume_token(DIVIDEEQUAL);
                  break;
                case MODEQUAL:
                  jj_consume_token(MODEQUAL);
                  break;
                case BITWISEXOREQUAL:
                  jj_consume_token(BITWISEXOREQUAL);
                  break;
                case BITWISEANDEQUAL:
                  jj_consume_token(BITWISEANDEQUAL);
                  break;
                case BITWISEOREQUAL:
                  jj_consume_token(BITWISEOREQUAL);
                  break;
                case SHIFTLEFT:
                  jj_consume_token(SHIFTLEFT);
                  break;
                case SHIFTRIGHT:
                  jj_consume_token(SHIFTRIGHT);
                  break;
                case SHIFTRIGHTEQUAL:
                  jj_consume_token(SHIFTRIGHTEQUAL);
                  break;
                case SHIFTLEFTEQUAL:
                  jj_consume_token(SHIFTLEFTEQUAL);
                  break;
                case EQUAL:
                  jj_consume_token(EQUAL);
                  break;
                case NOTEQUAL:
                  jj_consume_token(NOTEQUAL);
                  break;
                case LESSTHANOREQ:
                  jj_consume_token(LESSTHANOREQ);
                  break;
                case GREATERTHANOREQ:
                  jj_consume_token(GREATERTHANOREQ);
                  break;
                case AND:
                  jj_consume_token(AND);
                  break;
                case OR:
                  jj_consume_token(OR);
                  break;
                case PLUSPLUS:
                  jj_consume_token(PLUSPLUS);
                  break;
                case MINUSMINUS:
                  jj_consume_token(MINUSMINUS);
                  break;
                case COMMA:
                  jj_consume_token(COMMA);
                  break;
                case ARROWSTAR:
                  jj_consume_token(ARROWSTAR);
                  break;
                case POINTERTO:
                  jj_consume_token(POINTERTO);
                  break;
                case OPENPAREN:
                  jj_consume_token(OPENPAREN);
                  jj_consume_token(CLOSEPAREN);
                                   name += ")";
                  break;
                default:
                  jj_la1[151] = jj_gen;
                  if (jj_2_116(2)) {
                    jj_consume_token(OPENSQUARE);
                    jj_consume_token(CLOSESQUARE);
                                   name += "]";
                  } else {
                    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                    case SCOPE:
                    case AMPERSAND:
                    case STAR:
                    case AUTO:
                    case BOOL:
                    case CHAR:
                    case CLASS:
                    case CONST:
                    case DOUBLE:
                    case ENUM:
                    case EXPLICIT:
                    case FLOAT:
                    case FRIEND:
                    case INLINE:
                    case INT:
                    case LONG:
                    case MUTABLE:
                    case OPERATOR:
                    case REGISTER:
                    case SHORT:
                    case SIGNED:
                    case STATIC:
                    case STRUCT:
                    case THIS:
                    case TYPEDEF:
                    case TYPENAME:
                    case UNION:
                    case UNSIGNED:
                    case VIRTUAL:
                    case VOID:
                    case VOLATILE:
                    case WCHAR_T:
                    case ID:
                      declaration_specifiers();
                             name = getToken(0).image;
                      if (jj_2_112(2)) {
                        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
                        case STAR:
                          jj_consume_token(STAR);
                          break;
                        case AMPERSAND:
                          jj_consume_token(AMPERSAND);
                          break;
                        default:
                          jj_la1[147] = jj_gen;
                          jj_consume_token(-1);
                          throw new ParseException();
                        }
                                                                                name += getToken(0);
                      } else {
                        ;
                      }
                      break;
                    default:
                      jj_la1[152] = jj_gen;
                      jj_consume_token(-1);
                      throw new ParseException();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  {if (true) return name;}
    throw new Error("Missing return statement in function");
  }

  final public void exception_spec() throws ParseException {
    jj_consume_token(THROW);
    jj_consume_token(OPENPAREN);
    exception_list();
    jj_consume_token(CLOSEPAREN);
  }

  final public void exception_list() throws ParseException {
    identifier();
    label_40:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[153] = jj_gen;
        break label_40;
      }
      jj_consume_token(COMMA);
      identifier();
    }
  }

  final public void skip_initializer() throws ParseException {
  Token t = getToken(0);
  token_source.skipOverInitializer(t);
  }

//The opening quote has already been matched when we get here:
  final public void skip_string_literal() throws ParseException {
  Token t = getToken(0);
  token_source.skipOverStringLiteral(t);
  }

  final public void skip_object_body(DataElement theObject) throws ParseException {
  if (theObject == null)
   {if (true) return;}
  Token t = getToken(0);
  String body = token_source.skipOverObjectBody(t);
  if (symtab.doBodies())
  {
   StringBuffer buf = new StringBuffer(t.beginLine + ":" + body);
   //System.out.println("SETTING BUFFER=>" + buf);
   theObject.setBuffer(buf);
   theObject.expandChildren();
  }
  symtab.closeScope();
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_1();
    jj_save(0, xla);
    return retval;
  }

  final private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_2();
    jj_save(1, xla);
    return retval;
  }

  final private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_3();
    jj_save(2, xla);
    return retval;
  }

  final private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_4();
    jj_save(3, xla);
    return retval;
  }

  final private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_5();
    jj_save(4, xla);
    return retval;
  }

  final private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_6();
    jj_save(5, xla);
    return retval;
  }

  final private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_7();
    jj_save(6, xla);
    return retval;
  }

  final private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_8();
    jj_save(7, xla);
    return retval;
  }

  final private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_9();
    jj_save(8, xla);
    return retval;
  }

  final private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_10();
    jj_save(9, xla);
    return retval;
  }

  final private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_11();
    jj_save(10, xla);
    return retval;
  }

  final private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_12();
    jj_save(11, xla);
    return retval;
  }

  final private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_13();
    jj_save(12, xla);
    return retval;
  }

  final private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_14();
    jj_save(13, xla);
    return retval;
  }

  final private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_15();
    jj_save(14, xla);
    return retval;
  }

  final private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_16();
    jj_save(15, xla);
    return retval;
  }

  final private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_17();
    jj_save(16, xla);
    return retval;
  }

  final private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_18();
    jj_save(17, xla);
    return retval;
  }

  final private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_19();
    jj_save(18, xla);
    return retval;
  }

  final private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_20();
    jj_save(19, xla);
    return retval;
  }

  final private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_21();
    jj_save(20, xla);
    return retval;
  }

  final private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_22();
    jj_save(21, xla);
    return retval;
  }

  final private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_23();
    jj_save(22, xla);
    return retval;
  }

  final private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_24();
    jj_save(23, xla);
    return retval;
  }

  final private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_25();
    jj_save(24, xla);
    return retval;
  }

  final private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_26();
    jj_save(25, xla);
    return retval;
  }

  final private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_27();
    jj_save(26, xla);
    return retval;
  }

  final private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_28();
    jj_save(27, xla);
    return retval;
  }

  final private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_29();
    jj_save(28, xla);
    return retval;
  }

  final private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_30();
    jj_save(29, xla);
    return retval;
  }

  final private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_31();
    jj_save(30, xla);
    return retval;
  }

  final private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_32();
    jj_save(31, xla);
    return retval;
  }

  final private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_33();
    jj_save(32, xla);
    return retval;
  }

  final private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_34();
    jj_save(33, xla);
    return retval;
  }

  final private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_35();
    jj_save(34, xla);
    return retval;
  }

  final private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_36();
    jj_save(35, xla);
    return retval;
  }

  final private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_37();
    jj_save(36, xla);
    return retval;
  }

  final private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_38();
    jj_save(37, xla);
    return retval;
  }

  final private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_39();
    jj_save(38, xla);
    return retval;
  }

  final private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_40();
    jj_save(39, xla);
    return retval;
  }

  final private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_41();
    jj_save(40, xla);
    return retval;
  }

  final private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_42();
    jj_save(41, xla);
    return retval;
  }

  final private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_43();
    jj_save(42, xla);
    return retval;
  }

  final private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_44();
    jj_save(43, xla);
    return retval;
  }

  final private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_45();
    jj_save(44, xla);
    return retval;
  }

  final private boolean jj_2_46(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_46();
    jj_save(45, xla);
    return retval;
  }

  final private boolean jj_2_47(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_47();
    jj_save(46, xla);
    return retval;
  }

  final private boolean jj_2_48(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_48();
    jj_save(47, xla);
    return retval;
  }

  final private boolean jj_2_49(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_49();
    jj_save(48, xla);
    return retval;
  }

  final private boolean jj_2_50(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_50();
    jj_save(49, xla);
    return retval;
  }

  final private boolean jj_2_51(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_51();
    jj_save(50, xla);
    return retval;
  }

  final private boolean jj_2_52(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_52();
    jj_save(51, xla);
    return retval;
  }

  final private boolean jj_2_53(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_53();
    jj_save(52, xla);
    return retval;
  }

  final private boolean jj_2_54(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_54();
    jj_save(53, xla);
    return retval;
  }

  final private boolean jj_2_55(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_55();
    jj_save(54, xla);
    return retval;
  }

  final private boolean jj_2_56(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_56();
    jj_save(55, xla);
    return retval;
  }

  final private boolean jj_2_57(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_57();
    jj_save(56, xla);
    return retval;
  }

  final private boolean jj_2_58(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_58();
    jj_save(57, xla);
    return retval;
  }

  final private boolean jj_2_59(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_59();
    jj_save(58, xla);
    return retval;
  }

  final private boolean jj_2_60(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_60();
    jj_save(59, xla);
    return retval;
  }

  final private boolean jj_2_61(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_61();
    jj_save(60, xla);
    return retval;
  }

  final private boolean jj_2_62(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_62();
    jj_save(61, xla);
    return retval;
  }

  final private boolean jj_2_63(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_63();
    jj_save(62, xla);
    return retval;
  }

  final private boolean jj_2_64(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_64();
    jj_save(63, xla);
    return retval;
  }

  final private boolean jj_2_65(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_65();
    jj_save(64, xla);
    return retval;
  }

  final private boolean jj_2_66(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_66();
    jj_save(65, xla);
    return retval;
  }

  final private boolean jj_2_67(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_67();
    jj_save(66, xla);
    return retval;
  }

  final private boolean jj_2_68(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_68();
    jj_save(67, xla);
    return retval;
  }

  final private boolean jj_2_69(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_69();
    jj_save(68, xla);
    return retval;
  }

  final private boolean jj_2_70(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_70();
    jj_save(69, xla);
    return retval;
  }

  final private boolean jj_2_71(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_71();
    jj_save(70, xla);
    return retval;
  }

  final private boolean jj_2_72(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_72();
    jj_save(71, xla);
    return retval;
  }

  final private boolean jj_2_73(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_73();
    jj_save(72, xla);
    return retval;
  }

  final private boolean jj_2_74(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_74();
    jj_save(73, xla);
    return retval;
  }

  final private boolean jj_2_75(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_75();
    jj_save(74, xla);
    return retval;
  }

  final private boolean jj_2_76(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_76();
    jj_save(75, xla);
    return retval;
  }

  final private boolean jj_2_77(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_77();
    jj_save(76, xla);
    return retval;
  }

  final private boolean jj_2_78(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_78();
    jj_save(77, xla);
    return retval;
  }

  final private boolean jj_2_79(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_79();
    jj_save(78, xla);
    return retval;
  }

  final private boolean jj_2_80(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_80();
    jj_save(79, xla);
    return retval;
  }

  final private boolean jj_2_81(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_81();
    jj_save(80, xla);
    return retval;
  }

  final private boolean jj_2_82(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_82();
    jj_save(81, xla);
    return retval;
  }

  final private boolean jj_2_83(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_83();
    jj_save(82, xla);
    return retval;
  }

  final private boolean jj_2_84(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_84();
    jj_save(83, xla);
    return retval;
  }

  final private boolean jj_2_85(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_85();
    jj_save(84, xla);
    return retval;
  }

  final private boolean jj_2_86(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_86();
    jj_save(85, xla);
    return retval;
  }

  final private boolean jj_2_87(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_87();
    jj_save(86, xla);
    return retval;
  }

  final private boolean jj_2_88(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_88();
    jj_save(87, xla);
    return retval;
  }

  final private boolean jj_2_89(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_89();
    jj_save(88, xla);
    return retval;
  }

  final private boolean jj_2_90(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_90();
    jj_save(89, xla);
    return retval;
  }

  final private boolean jj_2_91(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_91();
    jj_save(90, xla);
    return retval;
  }

  final private boolean jj_2_92(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_92();
    jj_save(91, xla);
    return retval;
  }

  final private boolean jj_2_93(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_93();
    jj_save(92, xla);
    return retval;
  }

  final private boolean jj_2_94(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_94();
    jj_save(93, xla);
    return retval;
  }

  final private boolean jj_2_95(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_95();
    jj_save(94, xla);
    return retval;
  }

  final private boolean jj_2_96(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_96();
    jj_save(95, xla);
    return retval;
  }

  final private boolean jj_2_97(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_97();
    jj_save(96, xla);
    return retval;
  }

  final private boolean jj_2_98(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_98();
    jj_save(97, xla);
    return retval;
  }

  final private boolean jj_2_99(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_99();
    jj_save(98, xla);
    return retval;
  }

  final private boolean jj_2_100(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_100();
    jj_save(99, xla);
    return retval;
  }

  final private boolean jj_2_101(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_101();
    jj_save(100, xla);
    return retval;
  }

  final private boolean jj_2_102(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_102();
    jj_save(101, xla);
    return retval;
  }

  final private boolean jj_2_103(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_103();
    jj_save(102, xla);
    return retval;
  }

  final private boolean jj_2_104(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_104();
    jj_save(103, xla);
    return retval;
  }

  final private boolean jj_2_105(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_105();
    jj_save(104, xla);
    return retval;
  }

  final private boolean jj_2_106(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_106();
    jj_save(105, xla);
    return retval;
  }

  final private boolean jj_2_107(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_107();
    jj_save(106, xla);
    return retval;
  }

  final private boolean jj_2_108(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_108();
    jj_save(107, xla);
    return retval;
  }

  final private boolean jj_2_109(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_109();
    jj_save(108, xla);
    return retval;
  }

  final private boolean jj_2_110(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_110();
    jj_save(109, xla);
    return retval;
  }

  final private boolean jj_2_111(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_111();
    jj_save(110, xla);
    return retval;
  }

  final private boolean jj_2_112(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_112();
    jj_save(111, xla);
    return retval;
  }

  final private boolean jj_2_113(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_113();
    jj_save(112, xla);
    return retval;
  }

  final private boolean jj_2_114(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_114();
    jj_save(113, xla);
    return retval;
  }

  final private boolean jj_2_115(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_115();
    jj_save(114, xla);
    return retval;
  }

  final private boolean jj_2_116(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    boolean retval = !jj_3_116();
    jj_save(115, xla);
    return retval;
  }

  final private boolean jj_3R_101() {
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_81()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_76() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_455() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_93() {
    if (jj_scan_token(BITWISEANDEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_100() {
    if (jj_3R_101()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_80()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_223() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_389() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_388() {
    return false;
  }

  final private boolean jj_3R_387() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_7() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_92() {
    if (jj_scan_token(SHIFTRIGHTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_230() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_147() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_99() {
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_79()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_311() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_387()) {
    jj_scanpos = xsp;
    if (jj_3R_388()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_389()) {
    jj_scanpos = xsp;
    if (jj_3R_390()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_139() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_146() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_91() {
    if (jj_scan_token(SHIFTLEFTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_98() {
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_78()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_229() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_145() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_90() {
    if (jj_scan_token(MINUSEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_97() {
    if (jj_3R_98()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_77()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_221() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_228() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_144() {
    if (jj_scan_token(TRY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_273() {
    if (jj_3R_97()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_76()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_89() {
    if (jj_scan_token(PLUSEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_227() {
    if (jj_scan_token(TRY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_14() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_143() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_232() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_336() {
    if (jj_3R_416()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_88() {
    if (jj_scan_token(MODEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_75() {
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_226() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_140() {
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_62() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3R_232()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_142() {
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_12() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_87() {
    if (jj_scan_token(DIVIDEEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_225() {
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_13() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_274() {
    if (jj_scan_token(QUESTIONMARK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_41() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_13()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3R_139()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_140()) {
    jj_scanpos = xsp;
    if (jj_3_14()) {
    jj_scanpos = xsp;
    if (jj_3R_141()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_142()) {
    jj_scanpos = xsp;
    if (jj_3R_143()) {
    jj_scanpos = xsp;
    if (jj_3R_144()) {
    jj_scanpos = xsp;
    if (jj_3R_145()) {
    jj_scanpos = xsp;
    if (jj_3R_146()) {
    jj_scanpos = xsp;
    if (jj_3R_147()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_9() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_222() {
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_96() {
    if (jj_3R_273()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_274()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_224() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_86() {
    if (jj_scan_token(TIMESEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_11() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_60() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_11()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3R_221()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_222()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3R_223()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_224()) {
    jj_scanpos = xsp;
    if (jj_3R_225()) {
    jj_scanpos = xsp;
    if (jj_3R_226()) {
    jj_scanpos = xsp;
    if (jj_3R_227()) {
    jj_scanpos = xsp;
    if (jj_3R_228()) {
    jj_scanpos = xsp;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_85() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_10() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_317() {
    if (jj_3R_336()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_304() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_455()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_74() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_85()) {
    jj_scanpos = xsp;
    if (jj_3R_86()) {
    jj_scanpos = xsp;
    if (jj_3R_87()) {
    jj_scanpos = xsp;
    if (jj_3R_88()) {
    jj_scanpos = xsp;
    if (jj_3R_89()) {
    jj_scanpos = xsp;
    if (jj_3R_90()) {
    jj_scanpos = xsp;
    if (jj_3R_91()) {
    jj_scanpos = xsp;
    if (jj_3R_92()) {
    jj_scanpos = xsp;
    if (jj_3R_93()) {
    jj_scanpos = xsp;
    if (jj_3R_94()) {
    jj_scanpos = xsp;
    if (jj_3R_95()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_84() {
    if (jj_3R_96()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_74()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_4() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_3() {
    if (jj_3R_43()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_303() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_177() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_303()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_304()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_176() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_7()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_8()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_73() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_175() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_301()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_73()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_174() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_173() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_172() {
    if (jj_scan_token(TYPENAME)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_298() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_171() {
    if (jj_scan_token(TYPEDEF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_170() {
    if (jj_scan_token(FRIEND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_297() {
    if (jj_3R_342()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_257() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_169() {
    if (jj_scan_token(EXPLICIT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_168() {
    if (jj_scan_token(VIRTUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_72() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_72()) {
    jj_scanpos = xsp;
    if (jj_3R_257()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_415() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_167() {
    if (jj_scan_token(INLINE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_166() {
    if (jj_scan_token(MUTABLE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_6() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_5() {
    if (jj_3R_44()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_165() {
    if (jj_scan_token(STATIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_164() {
    if (jj_scan_token(REGISTER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_309() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_163() {
    if (jj_scan_token(AUTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_71() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_296() {
    if (jj_scan_token(UNION)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_162() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_333() {
    if (jj_scan_token(THROW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_415()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_161() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_160() {
    if (jj_scan_token(WCHAR_T)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_159() {
    if (jj_scan_token(UNSIGNED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_300() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_158() {
    if (jj_scan_token(SIGNED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_299() {
    if (jj_3R_343()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_157() {
    if (jj_scan_token(SHORT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_156() {
    if (jj_scan_token(CHAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_155() {
    if (jj_scan_token(VOID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_154() {
    if (jj_scan_token(BOOL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_153() {
    if (jj_scan_token(DOUBLE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_295() {
    if (jj_scan_token(STRUCT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_152() {
    if (jj_scan_token(FLOAT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_151() {
    if (jj_scan_token(LONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_150() {
    if (jj_scan_token(INT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_313() {
    if (jj_3R_391()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_149() {
    if (jj_scan_token(ENUM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_299()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_300()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_294() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_148() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_294()) {
    jj_scanpos = xsp;
    if (jj_3R_295()) {
    jj_scanpos = xsp;
    if (jj_3R_296()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_297()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_298()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_148()) {
    jj_scanpos = xsp;
    if (jj_3R_149()) {
    jj_scanpos = xsp;
    if (jj_3R_150()) {
    jj_scanpos = xsp;
    if (jj_3R_151()) {
    jj_scanpos = xsp;
    if (jj_3R_152()) {
    jj_scanpos = xsp;
    if (jj_3R_153()) {
    jj_scanpos = xsp;
    if (jj_3R_154()) {
    jj_scanpos = xsp;
    if (jj_3R_155()) {
    jj_scanpos = xsp;
    if (jj_3R_156()) {
    jj_scanpos = xsp;
    if (jj_3R_157()) {
    jj_scanpos = xsp;
    if (jj_3R_158()) {
    jj_scanpos = xsp;
    if (jj_3R_159()) {
    jj_scanpos = xsp;
    if (jj_3R_160()) {
    jj_scanpos = xsp;
    if (jj_3R_161()) {
    jj_scanpos = xsp;
    if (jj_3R_162()) {
    jj_scanpos = xsp;
    if (jj_3R_163()) {
    jj_scanpos = xsp;
    if (jj_3R_164()) {
    jj_scanpos = xsp;
    if (jj_3R_165()) {
    jj_scanpos = xsp;
    if (jj_3R_166()) {
    jj_scanpos = xsp;
    if (jj_3R_167()) {
    jj_scanpos = xsp;
    if (jj_3R_168()) {
    jj_scanpos = xsp;
    if (jj_3R_169()) {
    jj_scanpos = xsp;
    if (jj_3R_170()) {
    jj_scanpos = xsp;
    if (jj_3R_171()) {
    jj_scanpos = xsp;
    if (jj_3R_172()) {
    jj_scanpos = xsp;
    if (jj_3R_173()) {
    jj_scanpos = xsp;
    if (jj_3R_174()) {
    jj_scanpos = xsp;
    if (jj_3R_175()) {
    jj_scanpos = xsp;
    if (jj_3R_176()) {
    jj_scanpos = xsp;
    if (jj_3R_177()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_332() {
    if (jj_scan_token(TRY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_330()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_447() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_41()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_2() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_411() {
    if (jj_scan_token(RETURN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_447()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_410() {
    if (jj_scan_token(BREAK)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_409() {
    if (jj_scan_token(CONTINUE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_408() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_315() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_2()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_316() {
    if (jj_3R_321()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_312() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_329() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_408()) {
    jj_scanpos = xsp;
    if (jj_3R_409()) {
    jj_scanpos = xsp;
    if (jj_3R_410()) {
    jj_scanpos = xsp;
    if (jj_3R_411()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_310() {
    if (jj_scan_token(STRING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_308() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_70() {
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_69() {
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_201() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_316()) {
    jj_scanpos = xsp;
    if (jj_3R_317()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_200() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_199() {
    if (jj_scan_token(ASM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_314()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_198() {
    if (jj_scan_token(USING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_312()) {
    jj_scanpos = xsp;
    if (jj_3R_313()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_197() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_311()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_196() {
    if (jj_scan_token(EXTERN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_310()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_195() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_49() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_194()) {
    jj_scanpos = xsp;
    if (jj_3R_195()) {
    jj_scanpos = xsp;
    if (jj_3R_196()) {
    jj_scanpos = xsp;
    if (jj_3R_197()) {
    jj_scanpos = xsp;
    if (jj_3R_198()) {
    jj_scanpos = xsp;
    if (jj_3R_199()) {
    jj_scanpos = xsp;
    if (jj_3R_200()) {
    jj_scanpos = xsp;
    if (jj_3R_201()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_194() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_308()) {
    jj_scanpos = xsp;
    if (jj_3R_309()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_68() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_407() {
    if (jj_scan_token(FOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_406() {
    if (jj_scan_token(DO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_405() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_67() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_328() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_405()) {
    jj_scanpos = xsp;
    if (jj_3R_406()) {
    jj_scanpos = xsp;
    if (jj_3R_407()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_335() {
    if (jj_3R_391()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_414() {
    if (jj_scan_token(SWITCH)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_413() {
    if (jj_scan_token(IF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_412() {
    if (jj_3R_448()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_331() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_413()) {
    jj_scanpos = xsp;
    if (jj_3R_414()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_330() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_412()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSECURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_256() {
    if (jj_scan_token(_DEFAULT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_255() {
    if (jj_scan_token(CASE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_254() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_80() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_254()) {
    jj_scanpos = xsp;
    if (jj_3R_255()) {
    jj_scanpos = xsp;
    if (jj_3R_256()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_334() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_66() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_253() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_336()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_252() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_65() {
    if (jj_3R_80()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_251() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_250() {
    if (jj_scan_token(ASM)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_314()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_249() {
    if (jj_scan_token(USING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_334()) {
    jj_scanpos = xsp;
    if (jj_3R_335()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_248() {
    if (jj_scan_token(NAMESPACE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_311()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_247() {
    if (jj_3R_333()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_246() {
    if (jj_3R_332()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_245() {
    if (jj_3R_331()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_244() {
    if (jj_3R_330()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_243() {
    if (jj_3R_329()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_242() {
    if (jj_3R_328()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_293() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_292()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_79() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_242()) {
    jj_scanpos = xsp;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) {
    jj_scanpos = xsp;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) {
    jj_scanpos = xsp;
    if (jj_3R_247()) {
    jj_scanpos = xsp;
    if (jj_3R_248()) {
    jj_scanpos = xsp;
    if (jj_3R_249()) {
    jj_scanpos = xsp;
    if (jj_3R_250()) {
    jj_scanpos = xsp;
    if (jj_3R_251()) {
    jj_scanpos = xsp;
    if (jj_3_65()) {
    jj_scanpos = xsp;
    if (jj_3R_252()) {
    jj_scanpos = xsp;
    if (jj_3R_253()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_64() {
    if (jj_3R_79()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_448() {
    Token xsp;
    if (jj_3_64()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_64()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_341() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_63() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_292() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3R_341()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_62() {
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_136() {
    if (jj_3R_292()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_293()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_61() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_56() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_238() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_237() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_60() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_59() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_72() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) {
    jj_scanpos = xsp;
    if (jj_3R_237()) {
    jj_scanpos = xsp;
    if (jj_3R_238()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_57() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_56()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_239()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_55() {
    if (jj_3R_72()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_75() {
    Token xsp;
    if (jj_3_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_57()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_239()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    if (jj_3_55()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_55()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_58() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) {
    jj_scanpos = xsp;
    if (jj_3R_76()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_239() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_58()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_3R_235()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_51() {
    if (jj_scan_token(ELLIPSIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_236() {
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_53() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_54() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_70()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_53()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3R_71()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSECURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3R_236()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_386() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_84()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_385() {
    if (jj_3R_239()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_52() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_307() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3R_385()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_386()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_306() {
    if (jj_scan_token(ELLIPSIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_44() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_49() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_192() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_306()) {
    jj_scanpos = xsp;
    if (jj_3R_307()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_43() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_193() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_192()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_3R_192()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_51()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_193()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_399() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_203() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_50() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_398() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_325() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_398()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_399()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_138() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_235() {
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_325()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_137() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_68()) {
    jj_scanpos = xsp;
    if (jj_3R_69()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_324() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_44()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_43()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_47() {
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_46() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_202() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_112() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_137()) {
    jj_scanpos = xsp;
    if (jj_3R_138()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_50() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_202()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3R_203()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_66()) {
    jj_scanpos = xsp;
    if (jj_3R_67()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_463() {
    return false;
  }

  final private boolean jj_3_42() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_64()) {
    jj_scanpos = xsp;
    if (jj_3R_65()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_191() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_190() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_189() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_472() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_234() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_189()) {
    jj_scanpos = xsp;
    if (jj_3R_190()) {
    jj_scanpos = xsp;
    if (jj_3R_191()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_42()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_233() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_324()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_3R_233()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_234()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_440() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_472()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_41() {
    if (jj_3R_63()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(THROW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_440()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_40() {
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_323() {
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_380() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_112()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_322() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_231() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_322()) {
    jj_scanpos = xsp;
    if (jj_3R_323()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_116() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_379() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_378() {
    if (jj_scan_token(POINTERTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_377() {
    if (jj_scan_token(ARROWSTAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_376() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_231()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_375() {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_374() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_373() {
    if (jj_scan_token(OR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_372() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_371() {
    if (jj_scan_token(GREATERTHANOREQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_370() {
    if (jj_scan_token(LESSTHANOREQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_369() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_368() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_367() {
    if (jj_scan_token(SHIFTLEFTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_366() {
    if (jj_scan_token(SHIFTRIGHTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_365() {
    if (jj_scan_token(SHIFTRIGHT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_364() {
    if (jj_scan_token(SHIFTLEFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_363() {
    if (jj_scan_token(BITWISEOREQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_362() {
    if (jj_scan_token(BITWISEANDEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_361() {
    if (jj_scan_token(BITWISEXOREQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_360() {
    if (jj_scan_token(MODEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_359() {
    if (jj_scan_token(DIVIDEEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_358() {
    if (jj_scan_token(TIMESEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_357() {
    if (jj_scan_token(MINUSEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_356() {
    if (jj_scan_token(PLUSEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_355() {
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_354() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_37() {
    if (jj_3R_60()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_353() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_39() {
    if (jj_3R_61()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_111() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_352() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_110() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_115() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_351() {
    if (jj_scan_token(BITWISEOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_466() {
    if (jj_scan_token(VIRTUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_114() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_350() {
    if (jj_scan_token(BITWISEXOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_349() {
    if (jj_scan_token(MOD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_38() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_348() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_113() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_347() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_346() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_345() {
    if (jj_scan_token(DELETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_111()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_344() {
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_110()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_301() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_344()) {
    jj_scanpos = xsp;
    if (jj_3R_345()) {
    jj_scanpos = xsp;
    if (jj_3R_346()) {
    jj_scanpos = xsp;
    if (jj_3R_347()) {
    jj_scanpos = xsp;
    if (jj_3_113()) {
    jj_scanpos = xsp;
    if (jj_3R_348()) {
    jj_scanpos = xsp;
    if (jj_3R_349()) {
    jj_scanpos = xsp;
    if (jj_3R_350()) {
    jj_scanpos = xsp;
    if (jj_3_114()) {
    jj_scanpos = xsp;
    if (jj_3R_351()) {
    jj_scanpos = xsp;
    if (jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3R_352()) {
    jj_scanpos = xsp;
    if (jj_3R_353()) {
    jj_scanpos = xsp;
    if (jj_3R_354()) {
    jj_scanpos = xsp;
    if (jj_3R_355()) {
    jj_scanpos = xsp;
    if (jj_3R_356()) {
    jj_scanpos = xsp;
    if (jj_3R_357()) {
    jj_scanpos = xsp;
    if (jj_3R_358()) {
    jj_scanpos = xsp;
    if (jj_3R_359()) {
    jj_scanpos = xsp;
    if (jj_3R_360()) {
    jj_scanpos = xsp;
    if (jj_3R_361()) {
    jj_scanpos = xsp;
    if (jj_3R_362()) {
    jj_scanpos = xsp;
    if (jj_3R_363()) {
    jj_scanpos = xsp;
    if (jj_3R_364()) {
    jj_scanpos = xsp;
    if (jj_3R_365()) {
    jj_scanpos = xsp;
    if (jj_3R_366()) {
    jj_scanpos = xsp;
    if (jj_3R_367()) {
    jj_scanpos = xsp;
    if (jj_3R_368()) {
    jj_scanpos = xsp;
    if (jj_3R_369()) {
    jj_scanpos = xsp;
    if (jj_3R_370()) {
    jj_scanpos = xsp;
    if (jj_3R_371()) {
    jj_scanpos = xsp;
    if (jj_3R_372()) {
    jj_scanpos = xsp;
    if (jj_3R_373()) {
    jj_scanpos = xsp;
    if (jj_3R_374()) {
    jj_scanpos = xsp;
    if (jj_3R_375()) {
    jj_scanpos = xsp;
    if (jj_3R_376()) {
    jj_scanpos = xsp;
    if (jj_3R_377()) {
    jj_scanpos = xsp;
    if (jj_3R_378()) {
    jj_scanpos = xsp;
    if (jj_3R_379()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    if (jj_3R_380()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_220() {
    if (jj_3R_315()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_219() {
    if (jj_3R_321()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_218() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_217() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_272() {
    if (jj_scan_token(FLOATTWO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_216() {
    if (jj_scan_token(EXPORT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_271() {
    if (jj_scan_token(FLOATONE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_215() {
    if (jj_scan_token(USING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_270() {
    if (jj_scan_token(CHARACTER)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_214() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_269() {
    if (jj_scan_token(UNSIGNED_HEXADECIMALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_213() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_457() {
    if (jj_3R_465()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_466()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_268() {
    if (jj_scan_token(UNSIGNED_HEXADECIMALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_212() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_267() {
    if (jj_scan_token(UNSIGNED_DECIMALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_266() {
    if (jj_scan_token(UNSIGNED_DECIMALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_265() {
    if (jj_scan_token(UNSIGNED_OCTALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_264() {
    if (jj_scan_token(UNSIGNED_OCTALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_432() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_463()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_59() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_212()) {
    jj_scanpos = xsp;
    if (jj_3R_213()) {
    jj_scanpos = xsp;
    if (jj_3R_214()) {
    jj_scanpos = xsp;
    if (jj_3R_215()) {
    jj_scanpos = xsp;
    if (jj_3R_216()) {
    jj_scanpos = xsp;
    if (jj_3R_217()) {
    jj_scanpos = xsp;
    if (jj_3R_218()) {
    jj_scanpos = xsp;
    if (jj_3R_219()) {
    jj_scanpos = xsp;
    if (jj_3R_220()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_263() {
    if (jj_scan_token(HEXADECIMALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_262() {
    if (jj_scan_token(HEXADECIMALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_261() {
    if (jj_scan_token(DECIMALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_260() {
    if (jj_scan_token(DECIMALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_36() {
    if (jj_3R_59()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_259() {
    if (jj_scan_token(OCTALLONG)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_58() {
    Token xsp;
    if (jj_3_36()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_36()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_258() {
    if (jj_scan_token(OCTALINT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_109() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_35() {
    if (jj_3R_58()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_384() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_383()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_258()) {
    jj_scanpos = xsp;
    if (jj_3R_259()) {
    jj_scanpos = xsp;
    if (jj_3R_260()) {
    jj_scanpos = xsp;
    if (jj_3R_261()) {
    jj_scanpos = xsp;
    if (jj_3R_262()) {
    jj_scanpos = xsp;
    if (jj_3R_263()) {
    jj_scanpos = xsp;
    if (jj_3R_264()) {
    jj_scanpos = xsp;
    if (jj_3R_265()) {
    jj_scanpos = xsp;
    if (jj_3R_266()) {
    jj_scanpos = xsp;
    if (jj_3R_267()) {
    jj_scanpos = xsp;
    if (jj_3R_268()) {
    jj_scanpos = xsp;
    if (jj_3R_269()) {
    jj_scanpos = xsp;
    if (jj_3R_270()) {
    jj_scanpos = xsp;
    if (jj_3R_271()) {
    jj_scanpos = xsp;
    if (jj_3R_272()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_434() {
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_382() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_471() {
    if (jj_scan_token(PROTECTED)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_108() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_470() {
    if (jj_scan_token(PRIVATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_464() {
    if (jj_3R_465()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_34() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_469() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_465() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_469()) {
    jj_scanpos = xsp;
    if (jj_3R_470()) {
    jj_scanpos = xsp;
    if (jj_3R_471()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_381() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_434()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_302() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_381()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_108()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_382()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_446() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_436() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_456() {
    if (jj_scan_token(VIRTUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_464()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_445() {
    if (jj_3R_327()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_435() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_456()) {
    jj_scanpos = xsp;
    if (jj_3R_457()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_383() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_435()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_436()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_106() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_444() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_395() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_468() {
    if (jj_scan_token(TEMPLATE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_305() {
    if (jj_scan_token(COLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_383()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_384()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_107() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_77() {
    Token xsp;
    if (jj_3_107()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_107()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    if (jj_3R_239()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_187() {
    if (jj_scan_token(THIS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_188() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_136()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_431() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_430() {
    if (jj_3R_305()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_186() {
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_186()) {
    jj_scanpos = xsp;
    if (jj_3R_187()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_188()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_33() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_429() {
    return false;
  }

  final private boolean jj_3R_428() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_241() {
    if (jj_3R_327()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_240() {
    if (jj_3R_326()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_427() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_342() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_427()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_428()) {
    jj_scanpos = xsp;
    if (jj_3R_429()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_430()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_431()) {
    jj_scanpos = xsp;
    if (jj_3R_432()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_32() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_78() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) {
    jj_scanpos = xsp;
    if (jj_3R_241()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_182() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_105() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_104() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_402() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_181() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_180() {
    if (jj_3R_305()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_179() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_443() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_433() {
    return false;
  }

  final private boolean jj_3R_178() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_401() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_444()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_445()) {
    jj_scanpos = xsp;
    if (jj_3R_446()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_178()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_179()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_180()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_181()) {
    jj_scanpos = xsp;
    if (jj_3R_182()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_442() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_468()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_327()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_441() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_301()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_400() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_441()) {
    jj_scanpos = xsp;
    if (jj_3R_442()) {
    jj_scanpos = xsp;
    if (jj_3R_443()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_326() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_400()) {
    jj_scanpos = xsp;
    if (jj_3R_401()) {
    jj_scanpos = xsp;
    if (jj_3R_402()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_404() {
    if (jj_scan_token(OPERATOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_301()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_31() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_403() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_343() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3R_433()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_463()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_185() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_327() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_403()) {
    jj_scanpos = xsp;
    if (jj_3R_404()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_27() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_184() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_183() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_44() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_183()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_184()) {
    jj_scanpos = xsp;
    if (jj_3R_185()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_282() {
    if (jj_scan_token(NOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_281() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_280() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_279() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_394() {
    if (jj_3R_48()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_278() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_277() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_23() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_123() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_277()) {
    jj_scanpos = xsp;
    if (jj_3R_278()) {
    jj_scanpos = xsp;
    if (jj_3R_279()) {
    jj_scanpos = xsp;
    if (jj_3R_280()) {
    jj_scanpos = xsp;
    if (jj_3R_281()) {
    jj_scanpos = xsp;
    if (jj_3R_282()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_320() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_394()) {
    jj_scanpos = xsp;
    if (jj_3R_395()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_319() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_62()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(VOLATILE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_134() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_426() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_425() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_339() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_425()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DELETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_426()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(CONST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_103() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_102() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_340() {
    Token xsp;
    if (jj_3_102()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_102()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_28() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_209() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_30() {
    if (jj_3R_57()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_26() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_211() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3R_320()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_133() {
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_55()) {
    jj_scanpos = xsp;
    if (jj_3R_56()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_210() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3R_319()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_101() {
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_94() {
    if (jj_scan_token(STRING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_291() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_101()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_290() {
    if (jj_3R_340()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_54() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_210()) {
    jj_scanpos = xsp;
    if (jj_3R_211()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_29()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_30()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_135() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_290()) {
    jj_scanpos = xsp;
    if (jj_3R_291()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_100() {
    if (jj_3R_135()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_393() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_25() {
    if (jj_3R_54()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_99() {
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_454() {
    Token xsp;
    if (jj_3_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_99()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    xsp = jj_scanpos;
    if (jj_3_100()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_392() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_97() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_82()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_424() {
    if (jj_3R_454()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_207() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_98() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_133()) {
    jj_scanpos = xsp;
    if (jj_3R_134()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_423() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_42()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_24() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_23()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_22() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_422() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_208() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_90() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_132() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_206() {
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_96() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_132()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(DELETE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_131() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_421() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_95() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_131()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_338() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_421()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(NEW)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_422()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_423()) {
    jj_scanpos = xsp;
    if (jj_3R_424()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_98()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_318() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3R_392()) {
    jj_scanpos = xsp;
    if (jj_3R_393()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_289() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(ASSIGNEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_208()) {
    jj_scanpos = xsp;
    if (jj_3R_209()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_206()) {
    jj_scanpos = xsp;
    if (jj_3R_207()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_205() {
    if (jj_3R_318()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_204() {
    if (jj_3R_47()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_467() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_288() {
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_287() {
    if (jj_3R_339()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_204()) {
    jj_scanpos = xsp;
    if (jj_3R_205()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_286() {
    if (jj_3R_338()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_285() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_284() {
    if (jj_scan_token(STRING)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_94()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_283() {
    if (jj_3R_83()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_124() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_283()) {
    jj_scanpos = xsp;
    if (jj_3R_284()) {
    jj_scanpos = xsp;
    if (jj_3R_285()) {
    jj_scanpos = xsp;
    if (jj_3R_286()) {
    jj_scanpos = xsp;
    if (jj_3R_287()) {
    jj_scanpos = xsp;
    if (jj_3R_288()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_52()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_20() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_130() {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_449() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_20()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3_21()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_129() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_128() {
    if (jj_scan_token(POINTERTO)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_127() {
    if (jj_scan_token(DOT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_78()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_93() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_126() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_93()) {
    jj_scanpos = xsp;
    if (jj_3R_289()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_125() {
    if (jj_scan_token(OPENSQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSESQUARE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_121() {
    if (jj_scan_token(ARROWSTAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_92() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_125()) {
    jj_scanpos = xsp;
    if (jj_3R_126()) {
    jj_scanpos = xsp;
    if (jj_3R_127()) {
    jj_scanpos = xsp;
    if (jj_3R_128()) {
    jj_scanpos = xsp;
    if (jj_3R_129()) {
    jj_scanpos = xsp;
    if (jj_3R_130()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_88() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_462() {
    if (jj_scan_token(TYPEID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_467()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_461() {
    if (jj_scan_token(CONST_CAST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_460() {
    if (jj_scan_token(REINTERPET_CAST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_459() {
    if (jj_scan_token(STATIC_CAST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_120() {
    if (jj_scan_token(DOTSTAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_458() {
    if (jj_scan_token(DYNAMIC_CAST)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_91() {
    if (jj_3R_124()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_450() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_453() {
    if (jj_3R_337()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_452() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_451() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3R_458()) {
    jj_scanpos = xsp;
    if (jj_3R_459()) {
    jj_scanpos = xsp;
    if (jj_3R_460()) {
    jj_scanpos = xsp;
    if (jj_3R_461()) {
    jj_scanpos = xsp;
    if (jj_3R_462()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_92()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_420() {
    if (jj_3R_451()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_86() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_120()) {
    jj_scanpos = xsp;
    if (jj_3R_121()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_89() {
    if (jj_3R_123()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_416() {
    if (jj_3R_449()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_450()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_108() {
    if (jj_scan_token(GREATERTHANOREQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_111() {
    if (jj_scan_token(SHIFTRIGHT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_419() {
    if (jj_scan_token(SIZEOF)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_452()) {
    jj_scanpos = xsp;
    if (jj_3R_453()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_418() {
    if (jj_scan_token(MINUSMINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_337()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_87() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_417() {
    if (jj_scan_token(PLUSPLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_337()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_337() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_417()) {
    jj_scanpos = xsp;
    if (jj_3R_418()) {
    jj_scanpos = xsp;
    if (jj_3R_419()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3R_420()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_118() {
    if (jj_scan_token(MOD)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_107() {
    if (jj_scan_token(LESSTHANOREQ)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_110() {
    if (jj_scan_token(SHIFTLEFT)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_276() {
    if (jj_3R_337()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_17() {
    if (jj_3R_49()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_117() {
    if (jj_scan_token(DIVIDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_275() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_77()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_106() {
    if (jj_scan_token(GREATERTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_18() {
    if (jj_scan_token(SEMICOLON)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_103() {
    if (jj_scan_token(EQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_122() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_275()) {
    jj_scanpos = xsp;
    if (jj_3R_276()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_116() {
    if (jj_scan_token(STAR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_105() {
    if (jj_scan_token(LESSTHAN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_114() {
    if (jj_scan_token(MINUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_83() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_110()) {
    jj_scanpos = xsp;
    if (jj_3R_111()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_102() {
    if (jj_scan_token(NOTEQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_119() {
    if (jj_3R_122()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_86()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_113() {
    if (jj_scan_token(PLUS)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_397() {
    if (jj_3R_51()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_396() {
    if (jj_3R_50()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_85() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_116()) {
    jj_scanpos = xsp;
    if (jj_3R_117()) {
    jj_scanpos = xsp;
    if (jj_3R_118()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_19() {
    if (jj_scan_token(TILDE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_50()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_82() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_105()) {
    jj_scanpos = xsp;
    if (jj_3R_106()) {
    jj_scanpos = xsp;
    if (jj_3R_107()) {
    jj_scanpos = xsp;
    if (jj_3R_108()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_115() {
    if (jj_3R_119()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_85()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_321() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    lookingAhead = true;
    jj_semLA = isConstructor;
    lookingAhead = false;
    if (!jj_semLA || jj_3R_396()) {
    jj_scanpos = xsp;
    if (jj_3R_397()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_81() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_102()) {
    jj_scanpos = xsp;
    if (jj_3R_103()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_104()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_16() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_84() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_113()) {
    jj_scanpos = xsp;
    if (jj_3R_114()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    } else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_115()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_112() {
    if (jj_3R_115()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_84()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_314() {
    if (jj_scan_token(OPENPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_80() {
    if (jj_scan_token(AMPERSAND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_101()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_439() {
    if (jj_3R_302()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_390() {
    if (jj_scan_token(OPENCURLY)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_15() {
    if (jj_3R_46()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_438() {
    if (jj_scan_token(SCOPE)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_437() {
    if (jj_scan_token(TYPENAME)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_109() {
    if (jj_3R_112()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_83()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3R_391() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_437()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_438()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    xsp = jj_scanpos;
    if (jj_3R_439()) jj_scanpos = xsp;
    else if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(ID)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_8() {
    if (jj_3R_45()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_78() {
    if (jj_scan_token(BITWISEOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_99()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3_79() {
    if (jj_scan_token(BITWISEXOR)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_100()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_95() {
    if (jj_scan_token(BITWISEOREQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_104() {
    if (jj_3R_109()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_82()) { jj_scanpos = xsp; break; }
      if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    }
    return false;
  }

  final private boolean jj_3_77() {
    if (jj_scan_token(AND)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_3R_98()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_141() {
    if (jj_3R_81()) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    if (jj_scan_token(CLOSEPAREN)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  final private boolean jj_3R_94() {
    if (jj_scan_token(BITWISEXOREQUAL)) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) return false;
    return false;
  }

  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[154];
  final private int[] jj_la1_0 = {0x80000000,0x80000000,0x80000000,0x0,0x80000000,0x80000000,0x0,0x80000000,0x0,0x0,0x80000000,0x80000000,0x40000000,0xa0000000,0x2000000,0x80000000,0x40000000,0xa0000000,0x82000000,0x80000000,0x82000000,0x0,0x0,0x2000000,0x80000001,0x2000001,0x80000000,0x0,0x80000000,0x82000000,0xa8000000,0xa2000000,0x2000001,0x0,0xe0000000,0xa2000000,0x20000000,0xa8000000,0xa8000000,0x8000000,0xa0000000,0x20000000,0x28000000,0x0,0x80000000,0x0,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x2000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x2000001,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x0,0x0,0x80000000,0x20000000,0x0,0x0,0x80000000,0x0,0xa0000000,0x8000000,0x28000000,0x28000000,0x80000000,0x0,0x80000000,0x0,0xa0000000,0x80000000,0x2000000,0x80000000,0x0,0xa2000000,0x0,0x0,0x80000000,0x0,0xa0000000,0x0,0x0,0x0,0x80000000,0xa0000000,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa0000000,0xa0000000,0x0,0xa0000000,0x0,0x20000000,0x28000000,0x20000000,0x80000000,0x80000000,0xa0000000,0xe0000000,0x8000000,0x20000000,0x80000000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x80000000,0x0,0xa0000000,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x80000000,0x0,};
  final private int[] jj_la1_1 = {0x80100002,0x81100010,0x80900002,0x0,0x0,0x80100002,0x0,0x0,0x0,0x80100000,0x0,0x0,0x0,0xe0100000,0x23,0x0,0x0,0xe0100000,0x80100023,0x80100002,0x80100002,0x20,0x0,0x2,0x80100002,0x0,0x0,0x0,0x0,0x80100022,0x80100000,0xe0100002,0x0,0x4,0xe0100000,0xe0100000,0x20,0x0,0x0,0x0,0xe0100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2,0x0,0x1,0x2,0x0,0x1,0x2,0x4,0x0,0x0,0x0,0x0,0x0,0x2,0x80100000,0x4,0x0,0x21,0x21,0x0,0x4,0x20,0x80100000,0x0,0x0,0x0,0x0,0x3,0x4,0x0,0x0,0x4,0x20,0x80100010,0x4,0xe0100000,0x0,0x80100000,0x0,0x80100010,0x4,0x80100010,0x4,0xe0100000,0x0,0x2,0x80100000,0x0,0xe0100002,0x0,0x2,0x80100000,0x0,0xe0100000,0x0,0x0,0x0,0x80100002,0xe0100000,0xe0100000,0xffe0,0x8,0x0,0x600000,0x7800000,0x18000000,0x60000000,0x80000000,0x0,0xe0100000,0xe0100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80100000,0xe0100000,0x80100000,0x0,0x0,0x0,0xe0100000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xe0100000,0x800000,0x0,0x80100000,0x60000000,0x80000,0x40000,0x1fe3ffe4,0x80100000,0x4,};
  final private int[] jj_la1_2 = {0x79072c00,0x19072800,0x79072c00,0x0,0x0,0x79072c00,0x20000,0x0,0x0,0x19072800,0x0,0x10,0x0,0x248003c,0x40000,0x10,0x0,0x248003c,0x19072800,0x79072c00,0x79072c00,0x0,0x0,0x0,0x79072c00,0x0,0x0,0x0,0x0,0x79072c00,0x10,0x1bff7c3c,0x0,0x0,0x248003c,0x248003c,0x0,0x10,0x10,0x0,0x248003c,0x0,0x0,0x40000,0x1012010,0x40000,0x1012000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x20000000,0x19072800,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x19072800,0x0,0x248003c,0x0,0x0,0x0,0x19072800,0x0,0x19072800,0x0,0x248003c,0x0,0x901400,0x19072800,0x204000,0x1bff7c3c,0x0,0x0,0x19072800,0x800000,0x248003c,0x101000,0x80008000,0x80008000,0x79072c00,0x248003c,0x248003c,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x300,0x248003c,0x248003c,0xc,0x2480010,0x2080000,0x0,0xcc,0x0,0x10,0x0,0x19072800,0x248003c,0x0,0x0,0x0,0x0,0x30,0x10,0x0,0x0,0x0,0x0,0x10,0x0,0x0,0x10,0x0,0x1b4f283c,0x0,0x0,0x0,0x400000,0x3,0x0,0x2ac,0x19072800,0x0,};
  final private int[] jj_la1_3 = {0xa6ac8be5,0xa4ac89e5,0xa6ac8be5,0x0,0x80000200,0xa6ac8be5,0x800000,0x0,0x2000000,0xa0ac89e5,0x4000000,0x4000800,0x0,0x44510c00,0x10000000,0x4000800,0x0,0x44510c00,0xb4ac89e5,0xa6ac8be5,0xa6ac8be5,0x0,0x4000000,0x0,0xa6ac8be5,0x0,0x0,0x80000000,0x0,0xa6ac8be5,0x4000800,0xfdff8fff,0x0,0x0,0x44510c00,0x44510c00,0x0,0x4000800,0x4000800,0x0,0x44510c00,0x0,0x0,0x0,0x40c08c1,0x0,0xc00c1,0x4000000,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x7000,0x0,0x7000,0x7000,0x7000,0x2007000,0xa4ac89e5,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0xa4ac89e5,0x0,0x44510c00,0x0,0x0,0x0,0xa4ac89e5,0x0,0xa4ac89e5,0x0,0x44510c00,0x80000200,0x1902021a,0xa4ac89e5,0x0,0xfdff8fff,0x1000010,0x0,0xa4ac89e5,0x2,0x44510c00,0x20008,0x0,0x0,0xa6ac8be5,0x44510c00,0x44510c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x44510c00,0x44510c00,0x100000,0x44410c00,0x40410000,0x0,0x0,0x0,0x4000800,0x0,0xa4ac89e5,0x44510c00,0x0,0x0,0x0,0x0,0x0,0x800,0x2000000,0x800,0x4000000,0x2000000,0x4000800,0x0,0x4000000,0x4000800,0x4000000,0xe4fd8de5,0x0,0x0,0x0,0x400,0x0,0x0,0x0,0xa4ac89e5,0x0,};
  final private int[] jj_la1_4 = {0x100007f,0x100007b,0x100007f,0x800000,0x1000000,0x100007f,0x1,0x0,0x0,0x7b,0x1000000,0x1000000,0x0,0x1ffff00,0x20,0x1000000,0x0,0x1ffff00,0x100007b,0x100007f,0x100007f,0x0,0x1000000,0x0,0x100007f,0x0,0x0,0x0,0x0,0x100007f,0x1000000,0x1ffffff,0x0,0x0,0x1ffff00,0x1ffff00,0x0,0x1000000,0x1000000,0x0,0x1ffff00,0x0,0x0,0x20,0x1000052,0x20,0x52,0x1000000,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x0,0x8,0x8,0x8,0x0,0x4,0x100007b,0x0,0x1000,0x0,0x0,0x0,0x0,0x0,0x1000000,0x20,0x20,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x100007b,0x0,0x1ffff00,0x0,0x1000000,0x0,0x100007b,0x0,0x100007b,0x0,0x1ffff00,0x1000000,0x84,0x100007b,0x1000000,0x1ffffff,0x0,0x0,0x100007b,0x80,0x1ffff00,0x0,0x0,0x0,0x100007f,0x1ffff00,0x1ffff00,0x0,0x0,0x7fff00,0x0,0x0,0x0,0x0,0x0,0x0,0x1ffff00,0x1ffff00,0x0,0x1ffff00,0x0,0x0,0x0,0xffff00,0x1000000,0x0,0x100007b,0x1ffff00,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x1000000,0x0,0x1000000,0x1000000,0x1000000,0x1ffff7b,0x0,0x7fff00,0x0,0x0,0x0,0x0,0x0,0x100007b,0x0,};
  final private JJCalls[] jj_2_rtns = new JJCalls[116];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public Parser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 154; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    return (jj_scanpos.kind != kind);
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration enum = jj_expentries.elements(); enum.hasMoreElements();) {
        int[] oldentry = (int[])(enum.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  final public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[154];
    for (int i = 0; i < 154; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 154; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
          if ((jj_la1_4[i] & (1<<j)) != 0) {
            la1tokens[128+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 154; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 116; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
            case 45: jj_3_46(); break;
            case 46: jj_3_47(); break;
            case 47: jj_3_48(); break;
            case 48: jj_3_49(); break;
            case 49: jj_3_50(); break;
            case 50: jj_3_51(); break;
            case 51: jj_3_52(); break;
            case 52: jj_3_53(); break;
            case 53: jj_3_54(); break;
            case 54: jj_3_55(); break;
            case 55: jj_3_56(); break;
            case 56: jj_3_57(); break;
            case 57: jj_3_58(); break;
            case 58: jj_3_59(); break;
            case 59: jj_3_60(); break;
            case 60: jj_3_61(); break;
            case 61: jj_3_62(); break;
            case 62: jj_3_63(); break;
            case 63: jj_3_64(); break;
            case 64: jj_3_65(); break;
            case 65: jj_3_66(); break;
            case 66: jj_3_67(); break;
            case 67: jj_3_68(); break;
            case 68: jj_3_69(); break;
            case 69: jj_3_70(); break;
            case 70: jj_3_71(); break;
            case 71: jj_3_72(); break;
            case 72: jj_3_73(); break;
            case 73: jj_3_74(); break;
            case 74: jj_3_75(); break;
            case 75: jj_3_76(); break;
            case 76: jj_3_77(); break;
            case 77: jj_3_78(); break;
            case 78: jj_3_79(); break;
            case 79: jj_3_80(); break;
            case 80: jj_3_81(); break;
            case 81: jj_3_82(); break;
            case 82: jj_3_83(); break;
            case 83: jj_3_84(); break;
            case 84: jj_3_85(); break;
            case 85: jj_3_86(); break;
            case 86: jj_3_87(); break;
            case 87: jj_3_88(); break;
            case 88: jj_3_89(); break;
            case 89: jj_3_90(); break;
            case 90: jj_3_91(); break;
            case 91: jj_3_92(); break;
            case 92: jj_3_93(); break;
            case 93: jj_3_94(); break;
            case 94: jj_3_95(); break;
            case 95: jj_3_96(); break;
            case 96: jj_3_97(); break;
            case 97: jj_3_98(); break;
            case 98: jj_3_99(); break;
            case 99: jj_3_100(); break;
            case 100: jj_3_101(); break;
            case 101: jj_3_102(); break;
            case 102: jj_3_103(); break;
            case 103: jj_3_104(); break;
            case 104: jj_3_105(); break;
            case 105: jj_3_106(); break;
            case 106: jj_3_107(); break;
            case 107: jj_3_108(); break;
            case 108: jj_3_109(); break;
            case 109: jj_3_110(); break;
            case 110: jj_3_111(); break;
            case 111: jj_3_112(); break;
            case 112: jj_3_113(); break;
            case 113: jj_3_114(); break;
            case 114: jj_3_115(); break;
            case 115: jj_3_116(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
