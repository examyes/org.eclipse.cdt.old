<html>
<head>
   <meta http-equiv="Content-Language" content="en-us">
   <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
   <title>Changing Parse Formats</title>
</head>
<!----------------------------------------------------------------------------------->
<body text="#000000" bgcolor="#FFFFFF" link="#0000FF" vlink="#FF0000" alink="#000000">
<!-----------------------------------------------------------------------------------
<body>
<table BORDER=0 CELLSPACING=5 CELLPADDING=2 WIDTH="100%" >
  <tr> 
    <td ALIGN=left width="80%"><b><font face="Verdana" size="+3">The C/C++<br>
        Development Plugin</font></b></td>
    <td width="20%"><img SRC="../../images/idea.jpg" height=86 width=120 align=center></td>
  </tr>
</table>
----------------------------------------------------------------------------------->
<h1>How Patterns Work</h1>
<br>
Patterns are used by the Output View to allow lines that contain file names and
perhaps line numbers to be clicked to cause the file location to be opened in an Editor.
A line in this file can be 1 of 3 things:
<ol>
<li>An empty line or a comment line (denoted by a # in column 1)
<li>The start of a command description (denoted by a 'command:' at the beginning of the line)
<li>A pattern description.
</ol>
A formal description of the syntax of this file is included at the bottom of this file.


<h2>Command Descriptions</h2>


A Command Description consists of 2 things: A regular expression that describes the
command invocation, and a list of Pattern Descriptions.  The regular expression
is used to determine what set of Pattern Descriptons to use when parsing command output.
For example, if you type the command 'gmake clean', the Command Descriptions are checked and
.*make.* would match that command.   Therefore the Pattern Descriptions for .*make.* would
be used to parse the output of the 'gmake clean'.
<br>
 Note: The first Command Description that is found to match the command is used, so make
 sure you put the most specific patterns first.  For example, if the nmake.* Command
 Description appeared after .*make.*, then 'nmake install' would be matched by the .*make.*
 Command Descripton, which is probably not what was intended.


<h2>Pattern Descriptions</h2>
A Pattern Description has the following form:
<br><b>"obj-name" "match-info" "pattern=" "reg-ex"</b>
<br>
where:
<pre>
 	"obj-name":	The type of object that will be created in the Output View if
			a line of output matches this pattern.  If you have put an
			icon called "<object-name>.gif" in the org.eclipse.cdt.dstore.core/icons
			directory, then the icon will be displayed in the view.
	
 	"match-info":	This is some combination of the words "file" and "line" or nothing
			at all.  This is used to define how the backreferences in the
			regular expression are to be interpreted.  So "file line" means
			that the first back-reference is a file, and the second is a
			line number.  This may seem unnecessary, but we added this capability
			in the event that future releases support other types of information
			that may be useful, such as column info (once we support it).

 	"reg-ex": 	A regular expression that describes a line of output. Backreferences
			are used to store (instead of just match) the filename and line
			number.  To store a filename use the backreference ([\w,.,/,\\]*), and
			to store a line number, use (\d*)

</pre>
 Note: The patterns are checked against command output and only exact matches are dealt with
      So as an example, if you forget the .* (match everything) at the end of a pattern,
       the match will fail if there are trailing characters in the output not accounted for by
      the pattern


<h2>Pattern File Syntax</h2>

The pattern file syntax should be easy to grasp by looking at the ones
above, but for those of you who like formal grammars, here it is:

<pre>
  patterns-file:
	commands

  commands:
	command
	commands new-line command

  command:
	"command:" reg-ex new-line patterns

  patterns:
	pattern
	patterns new-line pattern

  pattern:
	command-name match-list "pattern=" reg-ex

  command-name:
	String that denotes what type of object will be created if some output matches this pattern

  match-list:
	file-or-line
	match-list space file-or-line

  file-or-line:
	"file" | "line"

  reg-ex:
	A regular expression

  new-line:
	The new-line character \n

  space:
	The space character
</pre>


<!----------------------------------------------------------------------------------->
<table BORDER=0 CELLSPACING=5 CELLPADDING=2 WIDTH="100%" >
<!----
  <tr> 
    <td ALIGN=left VALIGN=top COLSPAN="2" BGCOLOR="#0080c0"><b><font color="#ffffff" face="Arial,Helvetica">
       Contact Us</font></b></td>
  </tr>
---->
<!---------->
  <tr>
     <td ALIGN=left VALIGN=top COLSPAN="2">
     <p><a href = "../../frames/contact.htm">Contact Us</a>
     <p><a href="../../hglegal.htm"><img border="0" src="../../images/ngibmcpy.gif" width="195" height="12"></a></p>
  </td>  
</tr>
</table>
<!----------------------------------------------------------------------------------->
</body>
</html>
