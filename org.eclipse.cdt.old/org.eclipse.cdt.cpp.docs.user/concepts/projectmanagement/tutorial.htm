<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html>
<head>
   <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
   <meta http-equiv="Content-Language" content="en-us">
   <meta name="GENERATOR" content="Mozilla/4.76 [en] (X11; U; Linux 2.4.2-2 i686) [Netscape]">
   <title>The C/C++ Development Plugin - Command View</title>
<!----------------------------------------------------------------------------------->
</head>
<body text="#000000" bgcolor="#FFFFFF" link="#0000FF" vlink="#FF0000" alink="#000000">
&nbsp;
<table BORDER=0 CELLSPACING=5 CELLPADDING=2 WIDTH="100%" >
<caption>&nbsp;</caption>

<tr>
<td>
<h1>
<font size=+4>Autoconf Tutorial</font></h1>
<b><font size=+3>Managing Project Using Autoconf Support</font></b>
<p><font size=+1>The following is a tutorial that shows how to use the
CDT support for the GNU autoconf and automake tools to manage a newly created
C/C++ project. We will use a&nbsp; simple project - Hello -&nbsp; in this
tutorial as the focus is to explain the various feature that CDT provides.</font>
<p><b><font size=+2>1- Creating C++ Project</font></b>
<ul>
<li>
<font size=+1>The first step is to successfully <font color="#FF0000">create
a new cpp project </font><font color="#000000">and set the name to be "HelloAutoconf"
and set its location to be the default location.</font></font></li>

<li>
<font color="#000000"><font size=+1>Create a subdir which will include
the source file(s) for your C++ Program:</font></font></li>

<ol>
<li>
<font size=+1><font color="#000000">From the </font><font color="#FF0000">C/C++
project view</font><font color="#000000">, RMC(right mouse click) the project
and select "New -> Directory"</font></font></li>

<li>
<font color="#000000"><font size=+1>Enter the name of the directory&nbsp;
"src" and press OK</font></font></li>
</ol>

<li>
<font color="#000000"><font size=+1>Create a new cpp file by RMC the source
directory that you have created and select New - > File, then enter the
file name to be "main.cc"</font></font></li>

<li>
<font color="#000000"><font size=+1>Now we need to write main.cc:</font></font></li>

<p><br><font color="#000000"><font size=+1>You can simply copy and paste
the following code to your file in the Eclipse workspace or type the following:</font></font>
<ul><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>&nbsp;
<br><u><font face="Times New Roman,Times"><font color="#3366FF"><font size=+1>main.cc</font></font></font></u><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#ifdef
HAVE_CONFIG_H</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#include
&lt;config.h></font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#endif</font></font></font><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#include
"hello.h"</font></font></font><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>main()</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>{</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
CHello helloAutoconf;</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
helloAutoconf.display();</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>}</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>&nbsp;</ul>

<li>
<font face="Times New Roman,Times"><font color="#000000"><font size=+1>Also,
we need to write the following hello.cc and hello.h files</font></font></font></li>

<ul><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>&nbsp;
<br><u><font face="Times New Roman,Times"><font color="#3366FF"><font size=+1>hello.cc</font></font></font></u><u><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font></u>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#include
"hello.h"</font></font></font><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>void
CHello::display()</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>{</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
//Helloworld:</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
std::string strHello;</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
strHello = "Hello World! \n";</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
std::cout &lt;&lt; strHello;</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>}</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>&nbsp;<font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><u><font face="Times New Roman,Times"><font color="#3366FF"><font size=+1>hello.h</font></font></font></u><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#include
&lt;iostream></font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>#include
&lt;string></font></font></font><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>
<p><font face="Times New Roman,Times"><font color="#000000"><font size=+1>class
CHello</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>{</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>public:</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>&nbsp;&nbsp;&nbsp;
void display();</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1>};</font></font></font>
<br><font face="Times New Roman,Times"><font color="#000000"><font size=+1></font></font></font>&nbsp;</ul>
<font color="#000000"><font size=+1>Before we move to the next part make
sure that you have the following project structure:</font></font>
<p><font color="#000000"><font size=+1>HelloAutoconf</font></font>
<ul><font color="#000000"><font size=+1>src</font></font>
<ul><font color="#000000"><font size=+1>hello.cc</font></font>
<br><font color="#000000"><font size=+1>hello.h</font></font>
<br><font color="#000000"><font size=+1>main.cc</font></font>
<br><font color="#000000"><font size=+1></font></font>&nbsp;</ul>
</ul>
</ul>
<b><font color="#000000"><font size=+2>2- Creating Project Configuration
Files and Creating the Configure Script</font></font></b>
<blockquote><font color="#000000"><font size=+1>In order to use automake
and autoconf to generate the configure script, certain files has to exist
first. The CDT creates and maintains these file on your behalf.&nbsp; Two
types of these files are maintained by&nbsp; the CDT tools, the configure.in
and makefile.am. For each project there is only one configure.in and one
or more Makefile.am's. Let us learn how to use the CDT tool to generate
and maintain these files:</font></font></blockquote>

<ul>
<li>
<font size=+1><font color="#000000">From the </font><font color="#FF0000">C/C++
project view</font><font color="#000000">, RMC the HelloAutoconf project
</font>(top level directory)<font color="#000000"> and select Autoconf
-> Generate configure.</font></font></li>

<li>
<font color="#000000"><font size=+1>Click the OK button in the message
dialog.</font></font></li>

<li>
<font size=+1><font color="#000000">Make sure that the command has completed
successfully -&nbsp;</font> you can monitor the command output from the
<font color="#FF6666">output
view</font> <font color="#000000">, then examine your project directory.
You should now see all the files that automake and autoconf have created
to generate the configure script together with the configure script. This
is one good reason as to why it is a good practice to leave the top level
directory for the autoconf and automake generated files.&nbsp; Take note
of the following files as you may want to be familiar with, in&nbsp; the
case when you need to modify the way you manage your project. The files
are configure.in and Makefile.am.</font></font></li>

<li>
<font color="#000000"><font size=+1>Following the previous steps, the system
will assign the name of your project to be your package name - if you want
to check it out, examine the configure.in and check the input to the AM_INIT_AUTOMAKE
macro. Later on, we will learn how to change these values.</font></font></li>

<li>
<font color="#000000"><font size=+1>Also, by default, the system will set
the program name to be the same as the name of your source directory -&nbsp;
Later on, we will learn how to change these values.</font></font></li>

<li>
<font color="#000000"><font size=+1>For now let us use the system default
values and later on we will see how we can modify these values and regenerate
the configuration files and create the configure script.</font></font></li>
</ul>
&nbsp;<b><font size=+2>3- Running the Generated Configure Script&nbsp;</font></b>
<blockquote><font size=+1>Now that we have created the configure script,
the next step would be running the script and building our program&nbsp;</font></blockquote>
</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP COLSPAN="2">
<ul>
<li>
<font size=+1>&nbsp;From the <font color="#FF0000">C/C++ project</font>,
RMC the project (top level directory) folder and select Autoconf -> run
configure</font></li>

<li>
<font size=+1>Make sure that the command has completed successfully- you
can monitor the command output from the <font color="#FF0000">output view</font>,
and&nbsp;&nbsp; also by making sure that there is Makefile in your source
directory.</font></li>
</ul>
<b><font size=+2>4- Building and Running HelloWorld Program</font></b>
<blockquote>
<li>
<font size=+1>From the <font color="#FF0000">C/C++ project view </font>RMC
the HelloAutoconf project and select Build Project</font></li>

<li>
<font size=+1>After successful completion, check the source directory and
make sure that the "src" target has been created - we will change the target
name later.</font></li>

<li>
<font size=+1>From <font color="#FF0000">Command specification view</font>,
create a new command - Make sure that the command container being the "src"
directory, enter the name of the command to be&nbsp; "run HelloAutoconf"
and the invocation to be "./src"</font></li>

<li>
<font size=+1>From the command Specification view, RMC the command and
select execute - you can use the view's local tool bar as well.</font></li>

<li>
<font size=+1>Once the command has been finished, you should see Hello
World! in the <font color="#FF0000">output view</font></font></li>
</blockquote>

<p><br><b><font size=+2>5- Modifying and Updating Configuration Files (configure.in
and Makefile.am)</font></b>
<br>&nbsp;
<ul><font size=+1>There are many scenarios in which you will need to make
some modifications and updates to your configuration files, below is some
of these scenarios. The scenarios are selected to show the capabilities
that the CDT provide in supporting the GNU automake and autoconf.</font>
<br>&nbsp;
<li>
<b><font size=+1>Modifying the value for the _PROGRAMS variables (Makefile.am)</font></b></li>

<ul>&nbsp;
<li>
<font size=+1>We will continue with our example that we have created earlier.
As you might already noticed, the name of&nbsp; the target was set to be
"src" - the name of the source file directory . When the system tries to
set a value for the bin_PROGRAMS variable, which exists in the /HelloAutoconf/src/Makefile.am,
it sets the variable's value to be the name of its parent directory.&nbsp;&nbsp;
Now, if you want to change the program name, you may either&nbsp; change
the name of the directory to be your target name and regenerate the configuration
files and you are all set, or ,in the case that you would like to keep
your directory name as it is, you can edit the Makefile.am and set the
target name to be whatever value you want to use.</font></li>

<li>
<font size=+1>For now, all the updates to Makefile.am's will be done manually
by direct editing of the file. In future releases, the CDT tool will facilitate
the way to update configuration file.&nbsp;</font></li>

<li>
<font size=+1>Open HelloAutoconf/src/Makefile.am and change the value for
the following variables:</font></li>

<ol>
<li>
<font size=+1>Set the bin_PROGRAMS variable to be equal to "hello"</font></li>

<li>
<font size=+1>change all the other values of all the variables&nbsp; that
are related to the target name as well. The following are the variables
that need to be changed:</font></li>

<br><font size=+1>*_SOURCES, *_LDADD,&nbsp; and *_LDFLAGS, to be hello_SOURCES,
hello_LDADD, hello_LDFLAGS</font>
<li>
<font size=+1>Save the changes to the Makefile.am and now you need to regenerate
the configure script</font></li>

<li>
<font size=+1>RMC the hello project (top level directory) and select Autoconf
-> Generate configure&nbsp;</font></li>

<li>
<font size=+1>Click yes on the message dialog box and make sure that the
command has completed successfully</font></li>

<li>
<font size=+1>RMC the hello project and select Autoconf -> Run configure.&nbsp;</font></li>

<li>
<font size=+1>After executing the run configure command successfully, RMC
the hello project and select build Project to build the new target</font></li>

<li>
<font size=+1>You should now find that the hello target has been created
under the source directory</font></li>

<li>
<font size=+1>In order to run hello target, you can reuse the command that
you have created in the command specifications view. By editing the invocation
field and change the entry field to be "./hello" instead of "./src" and
then execute the command either from the local tool bar and select the
Execute command icon or by RMC the target and select Execute command action
from the context menu.</font></li>
</ol>
</ul>
</ul>

<ul>&nbsp;
<li>
<b><font size=+1>Expanding and Working with HelloAutoconf Project</font></b></li>

<br>&nbsp;
<p>&nbsp;
<p><font size=+1>Let us now expand our sample Hello project to include
source files in a sub directory of the "sources" directory.&nbsp;</font>
<br>&nbsp;
<ul>
<li>
<font size=+1>create a&nbsp;</font></li>
</ul>

<li>
<b><font size=+1>Changing a static library to a shared library and vise
cersa</font></b></li>

<li>
<b><font size=+1>Modifying libraries names</font></b></li>
</ul>

<p><br><b><font size=+3>Managing Imported Project with Existing Configuration
Files</font></b>
<br>&nbsp;
<br>&nbsp;
<table BORDER=0 CELLSPACING=5 CELLPADDING=2 WIDTH="100%" >
<caption>&nbsp;</caption>

<tr>
<td></td>
</tr>
</table>
</td>
</tr>

<tr>
<td ALIGN=LEFT VALIGN=TOP COLSPAN="2"></td>
</tr>
</table>

<table BORDER=0 CELLSPACING=5 CELLPADDING=2 WIDTH="100%" >
<caption>&nbsp;</caption>

<tr>
<td ALIGN=LEFT VALIGN=TOP COLSPAN="2"><a href="../../frames/contact.htm">Contact
Us</a>
<p><a href="../../hglegal.htm"><img SRC="ngibmcpy.gif" BORDER=0 height=12 width=195></a></td>
</tr>
</table>

</body>
</html>
