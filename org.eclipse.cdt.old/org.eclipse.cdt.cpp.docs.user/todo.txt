This is a list of features that could appear in future versions of this 
product.  
 
(Note: See the readme.txt for a list of known issues or defects)

Work that we are planning or considering doing:

1.  Linux Version 
     - We will be keeping up with the latest releases of Eclipse.  
       This will include versions on Linux and Windows as they become
       available.

2.  Proper Handling of Setting Environment 
     - In the current release, there is no integrated way to set 
       environment variables before kicking off a build or parse.  We 
       would like to provide views to allow this.  

3.  PA Integration
     - We will be providing some level of integration with other plugins 
       such as Performance Analaysis.  

4.  Limited support for Mixed Language Projects
     - We need to look at the issues that arise from having Java, C/C++ 
       and other languages in the same project.

5.  Code Generation Tools/SmartGuides     

6.  Miner Development
     - We plan to create documentation and provide views that help 
       users who wish to extend this product by writing their own miners.

7. Importing Parse Information From Other Projects
     - It would be nice if you could parse some code that is used a lot 
       such as an include directory, and then import that parse 
       information into one or more other projects.  

8. Parser Features
     - Full C++ Support (partially tested)
     - Support for some or all of the GCC Language Extensions and\or 
       support for non-ANSI C\C++
     - Performance Improvements (there are *lots* of areas where 
       performance can be improved)
     - Populate and make use of a database to store/retrieve parse information

Work that you may consider interesting or worthwhile
 
1.  Metrics
     - The DataStore is essentially just a tree of objects.  This makes 
       the job of writing tooling that consumes this information very 
       straight-forward.  A program metrics tool that calculates things 
       like number of functions, complexity, or any other standard 
       measurements would be a good way to familiarize yourself with 
       writing Miners.	   

2.  Class/Include Hierarchy Views
     - We are currently storing, in the DataStore, all the information 
       required to create a Visual Graph of both the Class Hierarchy and 
       Include File Hierarchy.  We have not however, investigated what is 
       required to implement a robust layout manager using the GEF 
       (Graphical Editing Framework) in Eclipse  

3.  Renamer
     - Another useful tool could be an object renamer. One note of 
       caution here:
       We have not tested any sort of round-tripping of the parse 
       information (i.e. using the parse information to re-generate the 
       code), so instead of trying to re-gen code, a better implementation 
       would be just to use the information in the DataStore to find where 
       objects are used and then handle the re-naming through some simple 
       file operations.

4.  Test Case Generator
     - Since we have parse information down to the statement\expression 
       level, a tool can be written that automatically creates test cases 
       that test each branch of a conditional statement for example


Debugger issues:

1.  Breakpoints
    - Set entry breakpoint
    - Set address breakpoint
    - Set watchpoint
    - Set dll/object load breakpoint
    - Add condition
2.  Source
    - Disassembly view for files not in project
    - Mixed view
3.  Monitor view
    - Disable monitor(even if disabled, it gets updated when tree is expanded)
    - Type information(creating type info degrades performance)
    - Change representation
4.  Gdb console
    - update ui for any command executed
5.  Exception Handling
    - Rerun Exception
6.  Storage view
    - Removing

