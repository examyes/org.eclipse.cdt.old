package org.eclipse.cdt.cpp.miners.pa.engine.gprof;


import java.util.*;
import java.io.*;
import org.eclipse.cdt.cpp.miners.pa.engine.*;

/**
 * GprofTraceFile represents a trace output file generated by gprof. A gprof
 * trace file is composed of flat profile and call graph.
 * This class parses the gprof trace file and uses the parsed information to
 * populate the PA engine model.
 */
public class GprofTraceFile extends PATraceFile {

  private GprofCallGraphEntry _currentCallGraphEntry = null;
  private double _samplingRate = 0;
  private double _cumulativeTime = 0;
  private boolean _foundCallGraphPrimaryLine = false;

  // constructor
  public GprofTraceFile(String filename) throws PAException {
  
   super(filename);   
  }

  public GprofTraceFile(File file) throws PAException {
  
   super(file);   
  }
  
  public GprofTraceFile(ITraceReader reader) {
  
   super(reader);
  }
  

  /**
   * Return the sampling rate
   */
  public double getSamplingRate() {
   return _samplingRate;
  }
      
  /**
   * Process an input line
   */
  protected void processLine(String line) throws Exception {
       
   if (_status.isParsingFlatProfile()) {
   
    if (GprofUtility.isSectionSeparatorLine(line)) {
     _status.setFlatProfileStatus(PAParseStatus.DONE);
     setTotalExecutionTime(_cumulativeTime);
    }
    else {
     line = line.trim();
     if (!GprofUtility.isEmptyLine(line)) {
      parseFlatProfileEntry(line);     
     }
    }
    
   }
   else if (_status.isParsingCallGraph()) {
    
    if (GprofUtility.isSectionSeparatorLine(line)) {
     _status.setCallGraphStatus(PAParseStatus.DONE);
    }
    else {
     line = line.trim();
     if (GprofUtility.isDashLine(line)) {
      _foundCallGraphPrimaryLine = false;
      _currentCallGraphEntry = null;
     }
     else if (GprofUtility.isCallGraphEntryLine(line)) {
      parseCallGraphEntry(line);
     }
    }
         
   }
   else if (_status.getFlatProfileStatus() == PAParseStatus.HEADER) {
   
    if (GprofUtility.isFlatProfileHeaderLine2(line.trim())) {
     _status.setFlatProfileStatus(PAParseStatus.PARSING);
     setTimeUnit(GprofUtility.getPerCallTimeUnit(line));
    }
    
   }
   else if (_status.getCallGraphStatus() == PAParseStatus.HEADER) {
   
    if (GprofUtility.isCallGraphHeaderLine2(line))
     _status.setCallGraphStatus(PAParseStatus.PARSING);
     
   }
   else if (GprofUtility.isFlatProfileHeaderLine1(line.trim())) {
    _status.setFlatProfileStatus(PAParseStatus.HEADER);
   }
   else if (_status.getCallGraphStatus() != PAParseStatus.DONE &&
            GprofUtility.isCallGraphHeaderLine1(line.trim())) 
   {
    _status.setCallGraphStatus(PAParseStatus.HEADER);
   }
   else if (GprofUtility.isSamplingRateLine(line.trim())) {
    _samplingRate = GprofUtility.getSamplingRate(line);
   }
   else {
    // other lines are ignored.
   }
   
  }
  
  /**
   * Parse a line in the flat profile
   */
  private void parseFlatProfileEntry(String line) throws Exception {
  
   PATokenizer tokenizer = new PATokenizer(line, 7);
   
   if (tokenizer.getTokenNumber() < 7) {
    throw new PAException("Invalid flat profile entry: " + line);
   }
   
   String lastToken = tokenizer.getLastToken();
   String functionName = GprofUtility.trimmedFunctionName(lastToken);
   PATraceFunction traceFunction = findOrCreateTraceFunction(functionName);
   
   try {
    traceFunction.setTotalPercentage(tokenizer.getTokenAsDouble(0));
    traceFunction.setSelfSeconds(tokenizer.getTokenAsDouble(2));
    traceFunction.setCallNumber(tokenizer.getTokenAsInt(3));
    traceFunction.setTotalMsPerCall(tokenizer.getTokenAsDouble(5));
    traceFunction.setHasSummary(true);
    _cumulativeTime = tokenizer.getTokenAsDouble(1);
   }
   catch (NumberFormatException e) {
    System.out.println(e);
    throw new PAException("Invalid flat profile entry: " + line);
   }
      
  }
  
  /**
   * Parse a line from the call graph section
   */
  private void parseCallGraphEntry(String line) throws Exception {
     
   if (_currentCallGraphEntry == null) {
    _currentCallGraphEntry = new GprofCallGraphEntry(this);
    _numberOfCallGraphEntries++;
    
    if (GprofUtility.isCallGraphPrimaryLine(line)) {
     _currentCallGraphEntry.addPrimaryLine(line);
     _foundCallGraphPrimaryLine = true;
    }
    else
     _currentCallGraphEntry.addCallerLine(line);
   }
   else {
   
    if (_foundCallGraphPrimaryLine) {
     _currentCallGraphEntry.addSubroutineLine(line);
    }
    else if (GprofUtility.isCallGraphPrimaryLine(line)) {
     _currentCallGraphEntry.addPrimaryLine(line);
     _foundCallGraphPrimaryLine = true;    
    }
    else {
     _currentCallGraphEntry.addCallerLine(line);
    }
    
   }   
  }
  
}